{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { animation, getNowTime, JCMFormatDate } from \"@/util/util\";\nimport { getChatMsg, getCompletion, getChatCompletion, createImage, createImageEdit, createImageVariations, createTranscription, createTranslation, createEmbeddings } from \"@/api/getData\";\nimport HeadPortrait from \"@/components/HeadPortrait\";\nimport Emoji from \"@/components/Emoji\";\nimport FileCard from \"@/components/FileCard.vue\";\nimport base from \"@/api/index\";\nimport MarkdownItVue from 'markdown-it-vue';\nimport 'markdown-it-vue/dist/markdown-it-vue.css';\nimport html2canvas from 'html2canvas';\nimport { AI_HEAD_IMG_URL, USER_HEAD_IMG_URL, USER_NAME } from '@/store/mutation-types';\nexport default {\n  components: {\n    HeadPortrait,\n    Emoji,\n    FileCard,\n    MarkdownItVue\n  },\n  props: {\n    storeStatu: Number,\n    settingInfo: Object,\n    frinedInfo: Object,\n    default() {\n      return {};\n    }\n  },\n  watch: {},\n  data() {\n    return {\n      fileArrays: [],\n      inputsStatus: true,\n      rows: 1,\n      //是否显示表情和录音按钮\n      buttonStatus: true,\n      //是否在接收消息中，如果是则true待发送状态，如果是false则是等待消息转圈状态\n      acqStatus: true,\n      chatList: [],\n      inputMsg: \"\",\n      showEmoji: false,\n      friendInfo: {},\n      srcImgList: [],\n      recording: false,\n      audioChunks: [],\n      screenshot: \"\",\n      contentBackImageUrl: \"https://bpic.51yuansu.com/backgd/cover/00/31/39/5bc8088deeedd.jpg?x-oss-process=image/resize,w_780\",\n      updateImage: null,\n      // 是否隐藏对话框上方介绍（空间局促时隐藏）\n      personInfoSpan: [2, 17, 5]\n    };\n  },\n  created() {\n    window.addEventListener('resize', this.handleResize);\n    this.handleResize();\n  },\n  destoryed() {\n    window.removeEventListener('resize', this.handleResize);\n  },\n  methods: {\n    //监听窗口的变化\n    handleResize() {\n      if (window.innerWidth <= 700) {\n        this.buttonStatus = false;\n        var textareaMsg = document.getElementById(\"textareaMsg\");\n        textareaMsg.style.marginLeft = \"0px\";\n        this.personInfoSpan = [14, 0, 10];\n      } else {\n        this.buttonStatus = true;\n        this.personInfoSpan = [2, 17, 5];\n      }\n      ;\n    },\n    newLine(event) {\n      this.rows += 1;\n      let text = this.$refs.textInput.value;\n      text += '\\n';\n      this.$refs.textInput.value = text;\n    },\n    //赋值对话列表\n    assignmentMesList(msgList) {\n      this.chatList = msgList;\n    },\n    //获取对话列表\n    getMesList() {\n      return this.chatList;\n    },\n    //清除当前对话列表\n    clearMsgList() {\n      this.chatList = [];\n    },\n    //更新内容背景图片\n    updateContentImageUrl(imgUrl) {\n      this.contentBackImageUrl = imgUrl;\n    },\n    //截图\n    sc() {\n      const contentEle = document.querySelector('#chat-content');\n      const options = {\n        backgroundColor: \"rgb(39, 42, 55)\" // 设置截图背景颜色\n      };\n\n      html2canvas(contentEle, options).then(canvas => {\n        canvas.toBlob(blob => {\n          const url = URL.createObjectURL(blob);\n          const link = document.createElement('a');\n          link.download = 'screenshot.png';\n          link.href = url;\n          link.click();\n          URL.revokeObjectURL(url);\n        });\n      });\n    },\n    //组装上下文数据\n    contextualAssemblyData() {\n      const conversation = [];\n      for (var chat of this.chatList) {\n        if (chat.uid == 'jcm') {\n          let my = {\n            'speaker': 'user',\n            'text': chat.msg\n          };\n          conversation.push(my);\n        } else if (chat.uid == this.frinedInfo.id) {\n          let ai = {\n            'speaker': 'agent',\n            'text': chat.msg\n          };\n          conversation.push(ai);\n        }\n      }\n      return conversation;\n    },\n    //开始录音\n    startRecording() {\n      navigator.mediaDevices.getUserMedia({\n        audio: true\n      }).then(stream => {\n        this.recorder = new MediaRecorder(stream);\n        this.recorder.addEventListener('dataavailable', event => {\n          this.audioChunks.push(event.data);\n        });\n        this.recording = true;\n        this.recorder.start();\n        // 在这里使用录音器\n        this.$message({\n          message: \"开始录音咯！\"\n        });\n      }).catch(error => {\n        this.$message({\n          type: \"error\",\n          message: \"获取音频流失败啦！\"\n        });\n      });\n    },\n    //停止录音\n    async stopRecording() {\n      this.recorder.stop();\n      this.recording = false;\n      this.recorder.ondataavailable = event => {\n        const blob = new Blob([event.data], {\n          type: 'audio/wav'\n        });\n        const file = new File([blob], 'recording.wav', {\n          type: 'audio/wav',\n          lastModified: Date.now()\n        });\n        const formData = new FormData();\n        formData.append('file', file);\n        formData.append('model', \"whisper-1\");\n        formData.append('temperature', this.settingInfo.TemperatureAudio);\n        formData.append('response_format', \"text\");\n        if (this.settingInfo.translateEnglish) {\n          createTranslation(formData, this.settingInfo.KeyMsg).then(data => {\n            this.$nextTick(() => {\n              this.inputMsg = data;\n            });\n          });\n        } else {\n          formData.append('language', this.settingInfo.language);\n          createTranscription(formData, this.settingInfo.KeyMsg).then(data => {\n            this.$nextTick(() => {\n              this.inputMsg = data;\n            });\n          });\n        }\n      };\n      this.$message({\n        message: \"结束录音咯！\"\n      });\n    },\n    //发送消息时等待\n    waitMsg() {\n      this.$message({\n        message: this.frinedInfo.id + \":\" + \"客观稍等片刻，马上告诉您！~\"\n      });\n    },\n    //发送信息\n    sendMsg(msgList) {\n      this.chatList.push(msgList);\n      this.scrollBottom();\n    },\n    // 在组件或页面外部声明计算余弦相似度的函数\n    cosineSimilarity(a, b) {\n      const dotProduct = a.reduce((acc, curr, i) => acc + curr * b[i], 0);\n      const normA = Math.sqrt(a.reduce((acc, curr) => acc + curr * curr, 0));\n      const normB = Math.sqrt(b.reduce((acc, curr) => acc + curr * curr, 0));\n      return dotProduct / (normA * normB);\n    },\n    //发送文字信息\n    sendText() {\n      // if(this.settingInfo.readefile){\n      //   console.log(this.fileArrays)\n      //   const formData = new FormData();\n      //   formData.append(\"model\", \"text-embedding-ada-002\");\n      //   formData.append(\"input\", \"吕世昊是谁?\");\n      //   createEmbeddings(formData,this.settingInfo.KeyMsg).then(data => {\n      //     const inputEmbedding=data.data[0]\n      //     // const similarText = this.findMostSimilarEmbedding(, this.fileArrays);\n\n      //     // 计算每个句子embedding与输入数据embedding之间的相似度\n      //     const similarities = this.cosineSimilarity(this.fileArrays.embedding, inputEmbedding.embedding)\n      //     const similaritiesArr=[];\n      //     console.log(similarities)\n      //     similaritiesArr.push(similarities)\n      //     // 对相似度进行排名，选择与输入数据最相似的句子或文章段落作为匹配结果\n      //     const topMatchIndex = similaritiesArr.reduce((maxIndex, similarity, index) => similarity > similaritiesArr[maxIndex] ? index : maxIndex, 0)\n\n      //     console.log(topMatchIndex)\n      //     const topMatchText = sentences[topMatchIndex]\n      //     console.log('最匹配的句子是：', topMatchText)\n      //     // console.log('最相似的文本为：', similarText);\n      //   })\n\n      //   // const configuration = new Configuration({\n      //   //   apiKey:  ,\n      //   // });\n      //   // const openai = new OpenAIApi(configuration);\n      //   // const response = openai.embeddings({\n      //   //   model: 'text-embedding-ada-002',\n      //   //   input:\"text\"\n      //   // });\n      //   // console.log(response)\n\n      //   return\n      // }\n      this.rows = 1;\n      // document.getElementById(\"textareaMsg\").style.height = \"26px\";\n      this.$nextTick(() => {\n        this.acqStatus = false;\n      });\n      const dateNow = JCMFormatDate(getNowTime());\n      let params = {};\n      if (this.settingInfo.openChangePicture) {\n        if (this.updateImage == null) {\n          this.$nextTick(() => {\n            this.acqStatus = true;\n          });\n          this.$message({\n            message: \"编辑图片模式：请您聊天窗口右上角先上传图片，再发送修改的内容~\",\n            type: \"warning\"\n          });\n          return;\n        } else {\n          // 通过验证后，上传文件\n          const formData = new FormData();\n          formData.append(\"image\", this.updateImage);\n          formData.append(\"prompt\", this.inputMsg);\n          formData.append(\"n\", this.settingInfo.n);\n          formData.append(\"size\", this.settingInfo.size);\n          const dateNow = JCMFormatDate(getNowTime());\n          let chatMsg = {\n            headImg: USER_HEAD_IMG_URL,\n            name: USER_NAME,\n            time: dateNow,\n            msg: this.inputMsg,\n            chatType: 0,\n            //信息类型，0文字，1图片\n            uid: \"jcm\" //uid\n          };\n\n          this.sendMsg(chatMsg);\n          this.inputMsg = \"\";\n          createImageEdit(formData, this.settingInfo.KeyMsg).then(data => {\n            for (var imgInfo of data) {\n              let imgResMsg = {\n                headImg: AI_HEAD_IMG_URL,\n                name: this.frinedInfo.name,\n                time: JCMFormatDate(getNowTime()),\n                msg: imgInfo.url,\n                chatType: 1,\n                //信息类型，0文字，1图片\n                extend: {\n                  imgType: 2 //(1表情，2本地图片)\n                },\n\n                uid: this.frinedInfo.id //uid\n              };\n\n              this.sendMsg(imgResMsg);\n              this.srcImgList.push(imgInfo.url);\n            }\n            this.updateImage = null;\n            this.acqStatus = true;\n          });\n          return;\n        }\n      }\n      if (this.inputMsg) {\n        let chatMsg = {\n          headImg: USER_HEAD_IMG_URL,\n          name: USER_NAME,\n          time: dateNow,\n          msg: this.inputMsg,\n          chatType: 0,\n          //信息类型，0文字，1图片\n          uid: \"jcm\" //uid\n        };\n\n        this.sendMsg(chatMsg);\n\n        //如果是图片模式则进入待开发不过可用改状态使用\n        if (this.settingInfo.openProductionPicture) {\n          params.prompt = this.inputMsg, params.n = this.settingInfo.n, params.size = this.settingInfo.size, createImage(params, this.settingInfo.KeyMsg).then(data => {\n            for (var imgInfo of data) {\n              let imgResMsg = {\n                headImg: AI_HEAD_IMG_URL,\n                name: this.frinedInfo.name,\n                time: JCMFormatDate(getNowTime()),\n                msg: imgInfo.url,\n                chatType: 1,\n                //信息类型，0文字，1图片\n                extend: {\n                  imgType: 2 //(1表情，2本地图片)\n                },\n\n                uid: this.frinedInfo.id //uid\n              };\n\n              this.sendMsg(imgResMsg);\n              this.srcImgList.push(imgInfo.url);\n            }\n            this.acqStatus = true;\n          });\n        } else {\n          //如果是文字模式则进入\n          params.model = this.frinedInfo.id, params.max_tokens = this.settingInfo.MaxTokens, params.temperature = this.settingInfo.Temperature, params.top_p = this.settingInfo.TopP, params.presence_penalty = this.settingInfo.PresencePenalty, params.frequency_penalty = this.settingInfo.FrequencyPenalty;\n          let chatBeforResMsg = {\n            headImg: AI_HEAD_IMG_URL,\n            name: this.frinedInfo.name,\n            time: JCMFormatDate(getNowTime()),\n            msg: \"\",\n            chatType: 0,\n            //信息类型，0文字，1图片\n            uid: this.frinedInfo.id //uid\n          };\n\n          if (this.frinedInfo.id === \"gpt-3.5-turbo\" || this.frinedInfo.id === \"gpt-3.5-turbo-0301\") {\n            this.chatCompletion(params, chatBeforResMsg);\n          } else {\n            this.completion(params, chatBeforResMsg);\n          }\n        }\n        if (this.storeStatu == 0) {\n          this.$emit('personCardSort', this.frinedInfo.id);\n        } else if (this.storeStatu == 1) {\n          this.$emit('fineTunesCardSort', this.frinedInfo.id);\n        }\n        this.inputMsg = \"\";\n        this.$parent.updateMoneyInfo();\n      } else {\n        this.$nextTick(() => {\n          this.acqStatus = true;\n        });\n        this.$message({\n          message: \"消息不能为空哦~\",\n          type: \"warning\"\n        });\n      }\n    },\n    async chatCompletion(params, chatBeforResMsg) {\n      let conversation = this.contextualAssemblyData();\n      params.messages = conversation.map(item => {\n        return {\n          role: item.speaker === 'user' ? 'user' : 'assistant',\n          content: item.text\n        };\n      });\n      params.stream = true;\n      //新增一个空的消息\n      this.sendMsg(chatBeforResMsg);\n      const currentResLocation = this.chatList.length - 1;\n      let _this = this;\n      try {\n        await fetch(base.baseUrl + '/v1/chat/completions', {\n          method: \"POST\",\n          timeout: 10000,\n          body: JSON.stringify({\n            ...params\n          }),\n          headers: {\n            Authorization: 'Bearer ' + this.settingInfo.KeyMsg,\n            \"Content-Type\": \"application/json\",\n            Accept: \"application/json\"\n          }\n        }).then(response => {\n          const reader = response.body.getReader();\n          function readStream(reader) {\n            return reader.read().then(({\n              done,\n              value\n            }) => {\n              if (done) {\n                return;\n              }\n              if (!_this.chatList[currentResLocation].reminder) {\n                _this.chatList[currentResLocation].reminder = \"\";\n              }\n              let decoded = new TextDecoder().decode(value);\n              decoded = _this.chatList[currentResLocation].reminder + decoded;\n              let decodedArray = decoded.split(\"data: \");\n              decodedArray.forEach(decoded => {\n                if (decoded !== \"\") {\n                  if (decoded.trim() === \"[DONE]\") {\n                    return;\n                  } else {\n                    const response = JSON.parse(decoded).choices[0].delta.content ? JSON.parse(decoded).choices[0].delta.content : \"\";\n                    _this.chatList[currentResLocation].msg = _this.chatList[currentResLocation].msg + response;\n                    _this.scrollBottom();\n                  }\n                }\n              });\n              return readStream(reader);\n            });\n          }\n          _this.chatList[currentResLocation].msg = _this.chatList[currentResLocation].msg + \":grinning:\";\n          readStream(reader);\n          this.$nextTick(() => {\n            this.acqStatus = true;\n          });\n        });\n      } catch (error) {\n        console.error(error);\n      }\n    },\n    async completion(params, chatBeforResMsg) {\n      params.stop = \" END\";\n      params.prompt = this.inputMsg;\n      params.stream = true;\n      //新增一个空的消息\n      this.sendMsg(chatBeforResMsg);\n      const currentResLocation = this.chatList.length - 1;\n      let _this = this;\n      try {\n        await fetch(base.baseUrl + '/v1/completions', {\n          method: \"POST\",\n          timeout: 10000,\n          body: JSON.stringify({\n            ...params\n          }),\n          headers: {\n            Authorization: 'Bearer ' + this.settingInfo.KeyMsg,\n            \"Content-Type\": \"application/json\"\n          }\n        }).then(response => {\n          if (response.status == 404) {\n            this.$message.error(\"模型已被删除或已取消...\");\n            this.$nextTick(() => {\n              this.acqStatus = true;\n            });\n            return;\n          }\n          const reader = response.body.getReader();\n          function readStream(reader) {\n            return reader.read().then(({\n              done,\n              value\n            }) => {\n              if (done) {\n                return;\n              }\n              let decodeds = new TextDecoder().decode(value);\n              let decodedArray = decodeds.split(\"data: \");\n              decodedArray.forEach(decoded => {\n                if (decoded !== \"\") {\n                  if (decoded.trim() === \"[DONE]\") {\n                    return;\n                  } else {\n                    const response = JSON.parse(decoded).choices[0].text;\n                    _this.chatList[currentResLocation].msg = _this.chatList[currentResLocation].msg + response;\n                  }\n                }\n              });\n              return readStream(reader);\n            });\n          }\n          this.$nextTick(() => {\n            this.acqStatus = true;\n          });\n          _this.chatList[currentResLocation].msg = _this.chatList[currentResLocation].msg + \":grinning:\";\n          readStream(reader);\n        });\n      } catch (error) {}\n    },\n    resetUpdate() {\n      this.updateImage = null;\n    },\n    //获取窗口高度并滚动至最底层\n    scrollBottom() {\n      this.$nextTick(() => {\n        const scrollDom = this.$refs.chatContent;\n        animation(scrollDom, scrollDom.scrollHeight - scrollDom.offsetHeight);\n      });\n    },\n    //关闭标签框\n    clickEmoji() {\n      this.showEmoji = !this.showEmoji;\n    },\n    //发送表情\n    sendEmoji(msg) {\n      const dateNow = JCMFormatDate(getNowTime());\n      let chatMsg = {\n        headImg: USER_HEAD_IMG_URL,\n        name: USER_NAME,\n        time: dateNow,\n        msg: msg,\n        chatType: 1,\n        //信息类型，0文字，1图片\n        extend: {\n          imgType: 1 //(1表情，2本地图片)\n        },\n\n        uid: \"jcm\"\n      };\n      this.sendMsg(chatMsg);\n      this.clickEmoji();\n    },\n    //发送本地图片\n    sendImg(e) {\n      this.acqStatus = false;\n      //获取文件\n      const file = e.target.files[0];\n\n      // 验证文件类型是否为PNG格式\n      if (file.type !== \"image/png\") {\n        this.$message({\n          message: \"请上传一个有效的PNG文件~\",\n          type: \"warning\"\n        });\n        this.$nextTick(() => {\n          this.acqStatus = true;\n        });\n        return;\n      }\n\n      // 验证文件大小是否小于4MB\n      if (file.size > 4 * 1024 * 1024) {\n        this.$message({\n          message: \"请上传一个小于4MB的文件~\",\n          type: \"warning\"\n        });\n        this.$nextTick(() => {\n          this.acqStatus = true;\n        });\n        return;\n      }\n      if (this.settingInfo.openChangePicture) {\n        this.updateImage = file;\n        this.$message({\n          message: \"图片上传完成啦，请给我提示进行编辑~\",\n          type: \"info\"\n        });\n        e.target.files = null;\n        this.$nextTick(() => {\n          this.acqStatus = true;\n        });\n        return;\n      }\n      // 通过验证后，上传文件\n      const formData = new FormData();\n      formData.append(\"image\", file);\n      formData.append(\"n\", this.settingInfo.n);\n      formData.append(\"size\", this.settingInfo.size);\n      const dateNow = JCMFormatDate(getNowTime());\n      let _this = this;\n      let chatMsg = {\n        headImg: USER_HEAD_IMG_URL,\n        name: USER_NAME,\n        time: dateNow,\n        msg: \"\",\n        chatType: 1,\n        //信息类型，0文字，1图片, 2文件\n        extend: {\n          imgType: 2 //(1表情，2本地图片)\n        },\n\n        uid: \"jcm\"\n      };\n      if (!e || !window.FileReader) return; // 看是否支持FileReader\n      let reader = new FileReader();\n      reader.readAsDataURL(file); // 关键一步，在这里转换的\n      reader.onloadend = function () {\n        chatMsg.msg = this.result; //赋值\n        _this.srcImgList.push(chatMsg.msg);\n      };\n      this.sendMsg(chatMsg);\n      createImageVariations(formData, this.settingInfo.KeyMsg).then(data => {\n        for (var imgInfo of data) {\n          let imgResMsg = {\n            headImg: AI_HEAD_IMG_URL,\n            name: this.frinedInfo.name,\n            time: JCMFormatDate(getNowTime()),\n            msg: imgInfo.url,\n            chatType: 1,\n            //信息类型，0文字，1图片\n            extend: {\n              imgType: 2 //(1表情，2本地图片)\n            },\n\n            uid: this.frinedInfo.id //uid\n          };\n\n          this.sendMsg(imgResMsg);\n          this.srcImgList.push(imgInfo.url);\n        }\n        this.acqStatus = true;\n      });\n      e.target.files = null;\n    },\n    //发送文件\n    sendFile(e) {\n      // let file = e.target.files[0];\n      // let reader = new FileReader();\n      // reader.readAsText(file);\n      // let _this=this\n      // reader.onload = function(event) {\n      //   let text = event.target.result;\n      //   //处理文件数据\n      //   const delimiters = ['.', '?', '!', '\\n',':',\",\"];\n      //   let result = [];\n      //   for (let i = 0; i < text.length; i++) {\n      //     let current = '';\n      //     while (i < text.length && !delimiters.includes(text[i])) {\n      //       current += text[i];\n      //       i++;\n      //     }\n      //     // 加入句子，并去除前后空格\n      //     if (current.trim()) {\n      //       result.push(current.trim());\n      //     }\n      //   }\n      //   const formData = new FormData()\n      //   formData.append(\"model\", \"text-embedding-ada-002\");\n      //   formData.append(\"input\", result);\n      //   createEmbeddings(formData,_this.settingInfo.KeyMsg).then(data => {\n      //     _this.fileArrays = data.data[0]\n      //   })\n      // };  \n      const dateNow = JCMFormatDate(getNowTime());\n      let chatMsg = {\n        headImg: USER_HEAD_IMG_URL,\n        name: USER_NAME,\n        time: dateNow,\n        msg: \"\",\n        chatType: 2,\n        //信息类型，0文字，1图片, 2文件\n        extend: {\n          fileType: \"\" //(1word，2excel，3ppt，4pdf，5zpi, 6txt)\n        },\n\n        uid: \"jcm\"\n      };\n      let files = e.target.files[0]; //图片文件名\n      chatMsg.msg = files;\n      if (files) {\n        switch (files.type) {\n          case \"application/msword\":\n          case \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\":\n            chatMsg.extend.fileType = 1;\n            break;\n          case \"application/vnd.ms-excel\":\n          case \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\":\n            chatMsg.extend.fileType = 2;\n            break;\n          case \"application/vnd.ms-powerpoint\":\n          case \"application/vnd.openxmlformats-officedocument.presentationml.presentation\":\n            chatMsg.extend.fileType = 3;\n            break;\n          case \"application/pdf\":\n            chatMsg.extend.fileType = 4;\n            break;\n          case \"application/zip\":\n          case \"application/x-zip-compressed\":\n            chatMsg.extend.fileType = 5;\n            break;\n          case \"text/plain\":\n            chatMsg.extend.fileType = 6;\n            break;\n          default:\n            chatMsg.extend.fileType = 0;\n        }\n        this.sendMsg(chatMsg);\n        e.target.files = null;\n      }\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}