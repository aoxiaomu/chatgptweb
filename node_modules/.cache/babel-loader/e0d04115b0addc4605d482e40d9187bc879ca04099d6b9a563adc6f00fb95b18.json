{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { animation, getNowTime, JCMFormatDate } from \"@/util/util\";\nimport { getChatMsg, getCompletion, getChatCompletion, createImage, createImageEdit, createImageVariations, createTranscription, createTranslation, createEmbeddings } from \"@/api/getData\";\nimport HeadPortrait from \"@/components/HeadPortrait\";\nimport Emoji from \"@/components/Emoji\";\nimport FileCard from \"@/components/FileCard.vue\";\nimport base from \"@/api/index\";\nimport MarkdownItVue from 'markdown-it-vue';\nimport 'markdown-it-vue/dist/markdown-it-vue.css';\nimport html2canvas from 'html2canvas';\nimport { AI_HEAD_IMG_URL, USER_HEAD_IMG_URL, USER_NAME } from '@/store/mutation-types';\nexport default {\n  components: {\n    HeadPortrait,\n    Emoji,\n    FileCard,\n    MarkdownItVue\n  },\n  props: {\n    storeStatu: Number,\n    settingInfo: Object,\n    frinedInfo: Object,\n    default() {\n      return {};\n    }\n  },\n  watch: {},\n  data() {\n    return {\n      fileArrays: [],\n      inputsStatus: true,\n      rows: 1,\n      //是否显示表情和录音按钮\n      buttonStatus: true,\n      //是否在接收消息中，如果是则true待发送状态，如果是false则是等待消息转圈状态\n      acqStatus: true,\n      chatList: [],\n      inputMsg: \"\",\n      showEmoji: false,\n      friendInfo: {},\n      srcImgList: [],\n      recording: false,\n      audioChunks: [],\n      screenshot: \"\",\n      contentBackImageUrl: \"https://bpic.51yuansu.com/backgd/cover/00/31/39/5bc8088deeedd.jpg?x-oss-process=image/resize,w_780\",\n      updateImage: null,\n      // 是否隐藏对话框上方介绍（空间局促时隐藏）\n      personInfoSpan: [2, 17, 5]\n    };\n  },\n  created() {\n    window.addEventListener('resize', this.handleResize);\n    this.handleResize();\n  },\n  destoryed() {\n    window.removeEventListener('resize', this.handleResize);\n  },\n  methods: {\n    //监听窗口的变化\n    handleResize() {\n      if (window.innerWidth <= 700) {\n        this.buttonStatus = false;\n        var textareaMsg = document.getElementById(\"textareaMsg\");\n        textareaMsg.style.marginLeft = \"0px\";\n        this.personInfoSpan = [14, 0, 10];\n      } else {\n        this.buttonStatus = true;\n        this.personInfoSpan = [2, 17, 5];\n      }\n      ;\n    },\n    newLine(event) {\n      this.rows += 1;\n      let text = this.$refs.textInput.value;\n      text += '\\n';\n      this.$refs.textInput.value = text;\n    },\n    //赋值对话列表\n    assignmentMesList(msgList) {\n      this.chatList = msgList;\n    },\n    //获取对话列表\n    getMesList() {\n      return this.chatList;\n    },\n    //清除当前对话列表\n    clearMsgList() {\n      this.chatList = [];\n    },\n    //更新内容背景图片\n    updateContentImageUrl(imgUrl) {\n      this.contentBackImageUrl = imgUrl;\n    },\n    //截图\n    sc() {\n      const contentEle = document.querySelector('#chat-content');\n      const options = {\n        backgroundColor: \"rgb(39, 42, 55)\" // 设置截图背景颜色\n      };\n\n      html2canvas(contentEle, options).then(canvas => {\n        canvas.toBlob(blob => {\n          const url = URL.createObjectURL(blob);\n          const link = document.createElement('a');\n          link.download = 'screenshot.png';\n          link.href = url;\n          link.click();\n          URL.revokeObjectURL(url);\n        });\n      });\n    },\n    //组装上下文数据\n    contextualAssemblyData() {\n      const conversation = [];\n      for (var chat of this.chatList) {\n        if (chat.uid == 'jcm') {\n          let my = {\n            'speaker': 'user',\n            'text': chat.msg\n          };\n          conversation.push(my);\n        } else if (chat.uid == this.frinedInfo.id) {\n          let ai = {\n            'speaker': 'agent',\n            'text': chat.msg\n          };\n          conversation.push(ai);\n        }\n      }\n      return conversation;\n    },\n    //开始录音\n    startRecording() {\n      navigator.mediaDevices.getUserMedia({\n        audio: true\n      }).then(stream => {\n        this.recorder = new MediaRecorder(stream);\n        this.recorder.addEventListener('dataavailable', event => {\n          this.audioChunks.push(event.data);\n        });\n        this.recording = true;\n        this.recorder.start();\n        // 在这里使用录音器\n        this.$message({\n          message: \"开始录音咯！\"\n        });\n      }).catch(error => {\n        this.$message({\n          type: \"error\",\n          message: \"获取音频流失败啦！\"\n        });\n      });\n    },\n    //停止录音\n    async stopRecording() {\n      this.recorder.stop();\n      this.recording = false;\n      this.recorder.ondataavailable = event => {\n        const blob = new Blob([event.data], {\n          type: 'audio/wav'\n        });\n        const file = new File([blob], 'recording.wav', {\n          type: 'audio/wav',\n          lastModified: Date.now()\n        });\n        const formData = new FormData();\n        formData.append('file', file);\n        formData.append('model', \"whisper-1\");\n        formData.append('temperature', this.settingInfo.TemperatureAudio);\n        formData.append('response_format', \"text\");\n        if (this.settingInfo.translateEnglish) {\n          createTranslation(formData, this.settingInfo.KeyMsg).then(data => {\n            this.$nextTick(() => {\n              this.inputMsg = data;\n            });\n          });\n        } else {\n          formData.append('language', this.settingInfo.language);\n          createTranscription(formData, this.settingInfo.KeyMsg).then(data => {\n            this.$nextTick(() => {\n              this.inputMsg = data;\n            });\n          });\n        }\n      };\n      this.$message({\n        message: \"结束录音咯！\"\n      });\n    },\n    //发送消息时等待\n    waitMsg() {\n      this.$message({\n        message: this.frinedInfo.id + \":\" + \"客观稍等片刻，马上告诉您！~\"\n      });\n    },\n    //发送信息\n    sendMsg(msgList) {\n      this.chatList.push(msgList);\n      this.scrollBottom();\n    },\n    // 在组件或页面外部声明计算余弦相似度的函数\n    cosineSimilarity(a, b) {\n      const dotProduct = a.reduce((acc, curr, i) => acc + curr * b[i], 0);\n      const normA = Math.sqrt(a.reduce((acc, curr) => acc + curr * curr, 0));\n      const normB = Math.sqrt(b.reduce((acc, curr) => acc + curr * curr, 0));\n      return dotProduct / (normA * normB);\n    },\n    //发送文字信息\n    sendText() {\n      // if(this.settingInfo.readefile){\n      //   console.log(this.fileArrays)\n      //   const formData = new FormData();\n      //   formData.append(\"model\", \"text-embedding-ada-002\");\n      //   formData.append(\"input\", \"吕世昊是谁?\");\n      //   createEmbeddings(formData,this.settingInfo.KeyMsg).then(data => {\n      //     const inputEmbedding=data.data[0]\n      //     // const similarText = this.findMostSimilarEmbedding(, this.fileArrays);\n\n      //     // 计算每个句子embedding与输入数据embedding之间的相似度\n      //     const similarities = this.cosineSimilarity(this.fileArrays.embedding, inputEmbedding.embedding)\n      //     const similaritiesArr=[];\n      //     console.log(similarities)\n      //     similaritiesArr.push(similarities)\n      //     // 对相似度进行排名，选择与输入数据最相似的句子或文章段落作为匹配结果\n      //     const topMatchIndex = similaritiesArr.reduce((maxIndex, similarity, index) => similarity > similaritiesArr[maxIndex] ? index : maxIndex, 0)\n\n      //     console.log(topMatchIndex)\n      //     const topMatchText = sentences[topMatchIndex]\n      //     console.log('最匹配的句子是：', topMatchText)\n      //     // console.log('最相似的文本为：', similarText);\n      //   })\n\n      //   // const configuration = new Configuration({\n      //   //   apiKey:  ,\n      //   // });\n      //   // const openai = new OpenAIApi(configuration);\n      //   // const response = openai.embeddings({\n      //   //   model: 'text-embedding-ada-002',\n      //   //   input:\"text\"\n      //   // });\n      //   // console.log(response)\n\n      //   return\n      // }\n      this.rows = 1;\n      // document.getElementById(\"textareaMsg\").style.height = \"26px\";\n      this.$nextTick(() => {\n        this.acqStatus = false;\n      });\n      const dateNow = JCMFormatDate(getNowTime());\n      let params = {};\n      if (this.settingInfo.openChangePicture) {\n        if (this.updateImage == null) {\n          this.$nextTick(() => {\n            this.acqStatus = true;\n          });\n          this.$message({\n            message: \"编辑图片模式：请您聊天窗口右上角先上传图片，再发送修改的内容~\",\n            type: \"warning\"\n          });\n          return;\n        } else {\n          // 通过验证后，上传文件\n          const formData = new FormData();\n          formData.append(\"image\", this.updateImage);\n          formData.append(\"prompt\", this.inputMsg);\n          formData.append(\"n\", this.settingInfo.n);\n          formData.append(\"size\", this.settingInfo.size);\n          const dateNow = JCMFormatDate(getNowTime());\n          let chatMsg = {\n            headImg: USER_HEAD_IMG_URL,\n            name: USER_NAME,\n            time: dateNow,\n            msg: this.inputMsg,\n            chatType: 0,\n            //信息类型，0文字，1图片\n            uid: \"jcm\" //uid\n          };\n\n          this.sendMsg(chatMsg);\n          this.inputMsg = \"\";\n          createImageEdit(formData, this.settingInfo.KeyMsg).then(data => {\n            for (var imgInfo of data) {\n              let imgResMsg = {\n                headImg: AI_HEAD_IMG_URL,\n                name: this.frinedInfo.name,\n                time: JCMFormatDate(getNowTime()),\n                msg: imgInfo.url,\n                chatType: 1,\n                //信息类型，0文字，1图片\n                extend: {\n                  imgType: 2 //(1表情，2本地图片)\n                },\n\n                uid: this.frinedInfo.id //uid\n              };\n\n              this.sendMsg(imgResMsg);\n              this.srcImgList.push(imgInfo.url);\n            }\n            this.updateImage = null;\n            this.acqStatus = true;\n          });\n          return;\n        }\n      }\n      if (this.inputMsg) {\n        let chatMsg = {\n          headImg: USER_HEAD_IMG_URL,\n          name: USER_NAME,\n          time: dateNow,\n          msg: this.inputMsg,\n          chatType: 0,\n          //信息类型，0文字，1图片\n          uid: \"jcm\" //uid\n        };\n\n        this.sendMsg(chatMsg);\n\n        //如果是图片模式则进入待开发不过可用改状态使用\n        if (this.settingInfo.openProductionPicture) {\n          params.prompt = this.inputMsg, params.n = this.settingInfo.n, params.size = this.settingInfo.size, createImage(params, this.settingInfo.KeyMsg).then(data => {\n            for (var imgInfo of data) {\n              let imgResMsg = {\n                headImg: AI_HEAD_IMG_URL,\n                name: this.frinedInfo.name,\n                time: JCMFormatDate(getNowTime()),\n                msg: imgInfo.url,\n                chatType: 1,\n                //信息类型，0文字，1图片\n                extend: {\n                  imgType: 2 //(1表情，2本地图片)\n                },\n\n                uid: this.frinedInfo.id //uid\n              };\n\n              this.sendMsg(imgResMsg);\n              this.srcImgList.push(imgInfo.url);\n            }\n            this.acqStatus = true;\n          });\n        } else {\n          //如果是文字模式则进入\n          params.model = this.frinedInfo.id, params.max_tokens = this.settingInfo.MaxTokens, params.temperature = this.settingInfo.Temperature, params.top_p = this.settingInfo.TopP, params.presence_penalty = this.settingInfo.PresencePenalty, params.frequency_penalty = this.settingInfo.FrequencyPenalty;\n          let chatBeforResMsg = {\n            headImg: AI_HEAD_IMG_URL,\n            name: this.frinedInfo.name,\n            time: JCMFormatDate(getNowTime()),\n            msg: \"\",\n            chatType: 0,\n            //信息类型，0文字，1图片\n            uid: this.frinedInfo.id //uid\n          };\n\n          if (this.frinedInfo.id === \"gpt-3.5-turbo\" || this.frinedInfo.id === \"gpt-3.5-turbo-0301\") {\n            this.chatCompletion(params, chatBeforResMsg);\n          } else {\n            this.completion(params, chatBeforResMsg);\n          }\n        }\n        if (this.storeStatu == 0) {\n          this.$emit('personCardSort', this.frinedInfo.id);\n        } else if (this.storeStatu == 1) {\n          this.$emit('fineTunesCardSort', this.frinedInfo.id);\n        }\n        this.inputMsg = \"\";\n        this.$parent.updateMoneyInfo();\n      } else {\n        this.$nextTick(() => {\n          this.acqStatus = true;\n        });\n        this.$message({\n          message: \"消息不能为空哦~\",\n          type: \"warning\"\n        });\n      }\n    },\n    async chatCompletion(params, chatBeforResMsg) {\n      let conversation = this.contextualAssemblyData();\n      params.messages = conversation.map(item => {\n        return {\n          role: item.speaker === 'user' ? 'user' : 'assistant',\n          content: item.text\n        };\n      });\n      params.stream = true;\n      //新增一个空的消息\n      this.sendMsg(chatBeforResMsg);\n      const currentResLocation = this.chatList.length - 1;\n      let _this = this;\n      try {\n        await fetch(base.baseUrl + '/v1/chat/completions', {\n          method: \"POST\",\n          timeout: 10000,\n          body: JSON.stringify({\n            ...params\n          }),\n          headers: {\n            Authorization: 'Bearer ' + this.settingInfo.KeyMsg,\n            \"Content-Type\": \"application/json\",\n            Accept: \"application/json\"\n          }\n        }).then(response => {\n          const reader = response.body.getReader();\n          function readStream(reader) {\n            return reader.read().then(({\n              done,\n              value\n            }) => {\n              if (done) {\n                return;\n              }\n              if (!_this.chatList[currentResLocation].reminder) {\n                _this.chatList[currentResLocation].reminder = \"\";\n              }\n              let decoded = new TextDecoder().decode(value);\n              decoded = _this.chatList[currentResLocation].reminder + decoded;\n              let decodedArray = decoded.split(\"data: \");\n              decodedArray.forEach(decoded => {\n                if (decoded !== \"\") {\n                  if (decoded.trim() === \"[DONE]\") {\n                    return;\n                  } else {\n                    const response = JSON.parse(decoded).choices[0].delta.content ? JSON.parse(decoded).choices[0].delta.content : \"\";\n                    _this.chatList[currentResLocation].msg = _this.chatList[currentResLocation].msg + response;\n                    _this.scrollBottom();\n                  }\n                }\n              });\n              return readStream(reader);\n            });\n          }\n          _this.chatList[currentResLocation].msg = _this.chatList[currentResLocation].msg + \":grinning:\";\n          readStream(reader);\n          this.$nextTick(() => {\n            this.acqStatus = true;\n          });\n        });\n      } catch (error) {\n        console.error(error);\n      }\n    },\n    async completion(params, chatBeforResMsg) {\n      params.stop = \" END\";\n      params.prompt = this.inputMsg;\n      params.stream = true;\n      //新增一个空的消息\n      this.sendMsg(chatBeforResMsg);\n      const currentResLocation = this.chatList.length - 1;\n      let _this = this;\n      try {\n        await fetch(base.baseUrl + '/v1/completions', {\n          method: \"POST\",\n          timeout: 10000,\n          body: JSON.stringify({\n            ...params\n          }),\n          headers: {\n            Authorization: 'Bearer ' + this.settingInfo.KeyMsg,\n            \"Content-Type\": \"application/json\"\n          }\n        }).then(response => {\n          if (response.status == 404) {\n            this.$message.error(\"模型已被删除或已取消...\");\n            this.$nextTick(() => {\n              this.acqStatus = true;\n            });\n            return;\n          }\n          const reader = response.body.getReader();\n          function readStream(reader) {\n            return reader.read().then(({\n              done,\n              value\n            }) => {\n              if (done) {\n                return;\n              }\n              let decodeds = new TextDecoder().decode(value);\n              let decodedArray = decodeds.split(\"data: \");\n              decodedArray.forEach(decoded => {\n                if (decoded !== \"\") {\n                  if (decoded.trim() === \"[DONE]\") {\n                    return;\n                  } else {\n                    const response = JSON.parse(decoded).choices[0].text;\n                    _this.chatList[currentResLocation].msg = _this.chatList[currentResLocation].msg + response;\n                  }\n                }\n              });\n              return readStream(reader);\n            });\n          }\n          this.$nextTick(() => {\n            this.acqStatus = true;\n          });\n          _this.chatList[currentResLocation].msg = _this.chatList[currentResLocation].msg + \":grinning:\";\n          readStream(reader);\n        });\n      } catch (error) {}\n    },\n    resetUpdate() {\n      this.updateImage = null;\n    },\n    //获取窗口高度并滚动至最底层\n    scrollBottom() {\n      this.$nextTick(() => {\n        const scrollDom = this.$refs.chatContent;\n        animation(scrollDom, scrollDom.scrollHeight - scrollDom.offsetHeight);\n      });\n    },\n    //关闭标签框\n    clickEmoji() {\n      this.showEmoji = !this.showEmoji;\n    },\n    //发送表情\n    sendEmoji(msg) {\n      const dateNow = JCMFormatDate(getNowTime());\n      let chatMsg = {\n        headImg: USER_HEAD_IMG_URL,\n        name: USER_NAME,\n        time: dateNow,\n        msg: msg,\n        chatType: 1,\n        //信息类型，0文字，1图片\n        extend: {\n          imgType: 1 //(1表情，2本地图片)\n        },\n\n        uid: \"jcm\"\n      };\n      this.sendMsg(chatMsg);\n      this.clickEmoji();\n    },\n    //发送本地图片\n    sendImg(e) {\n      this.acqStatus = false;\n      //获取文件\n      const file = e.target.files[0];\n\n      // 验证文件类型是否为PNG格式\n      if (file.type !== \"image/png\") {\n        this.$message({\n          message: \"请上传一个有效的PNG文件~\",\n          type: \"warning\"\n        });\n        this.$nextTick(() => {\n          this.acqStatus = true;\n        });\n        return;\n      }\n\n      // 验证文件大小是否小于4MB\n      if (file.size > 4 * 1024 * 1024) {\n        this.$message({\n          message: \"请上传一个小于4MB的文件~\",\n          type: \"warning\"\n        });\n        this.$nextTick(() => {\n          this.acqStatus = true;\n        });\n        return;\n      }\n      if (this.settingInfo.openChangePicture) {\n        this.updateImage = file;\n        this.$message({\n          message: \"图片上传完成啦，请给我提示进行编辑~\",\n          type: \"info\"\n        });\n        e.target.files = null;\n        this.$nextTick(() => {\n          this.acqStatus = true;\n        });\n        return;\n      }\n      // 通过验证后，上传文件\n      const formData = new FormData();\n      formData.append(\"image\", file);\n      formData.append(\"n\", this.settingInfo.n);\n      formData.append(\"size\", this.settingInfo.size);\n      const dateNow = JCMFormatDate(getNowTime());\n      let _this = this;\n      let chatMsg = {\n        headImg: USER_HEAD_IMG_URL,\n        name: USER_NAME,\n        time: dateNow,\n        msg: \"\",\n        chatType: 1,\n        //信息类型，0文字，1图片, 2文件\n        extend: {\n          imgType: 2 //(1表情，2本地图片)\n        },\n\n        uid: \"jcm\"\n      };\n      if (!e || !window.FileReader) return; // 看是否支持FileReader\n      let reader = new FileReader();\n      reader.readAsDataURL(file); // 关键一步，在这里转换的\n      reader.onloadend = function () {\n        chatMsg.msg = this.result; //赋值\n        _this.srcImgList.push(chatMsg.msg);\n      };\n      this.sendMsg(chatMsg);\n      createImageVariations(formData, this.settingInfo.KeyMsg).then(data => {\n        for (var imgInfo of data) {\n          let imgResMsg = {\n            headImg: AI_HEAD_IMG_URL,\n            name: this.frinedInfo.name,\n            time: JCMFormatDate(getNowTime()),\n            msg: imgInfo.url,\n            chatType: 1,\n            //信息类型，0文字，1图片\n            extend: {\n              imgType: 2 //(1表情，2本地图片)\n            },\n\n            uid: this.frinedInfo.id //uid\n          };\n\n          this.sendMsg(imgResMsg);\n          this.srcImgList.push(imgInfo.url);\n        }\n        this.acqStatus = true;\n      });\n      e.target.files = null;\n    },\n    //发送文件\n    sendFile(e) {\n      // let file = e.target.files[0];\n      // let reader = new FileReader();\n      // reader.readAsText(file);\n      // let _this=this\n      // reader.onload = function(event) {\n      //   let text = event.target.result;\n      //   //处理文件数据\n      //   const delimiters = ['.', '?', '!', '\\n',':',\",\"];\n      //   let result = [];\n      //   for (let i = 0; i < text.length; i++) {\n      //     let current = '';\n      //     while (i < text.length && !delimiters.includes(text[i])) {\n      //       current += text[i];\n      //       i++;\n      //     }\n      //     // 加入句子，并去除前后空格\n      //     if (current.trim()) {\n      //       result.push(current.trim());\n      //     }\n      //   }\n      //   const formData = new FormData()\n      //   formData.append(\"model\", \"text-embedding-ada-002\");\n      //   formData.append(\"input\", result);\n      //   createEmbeddings(formData,_this.settingInfo.KeyMsg).then(data => {\n      //     _this.fileArrays = data.data[0]\n      //   })\n      // };  \n      const dateNow = JCMFormatDate(getNowTime());\n      let chatMsg = {\n        headImg: USER_HEAD_IMG_URL,\n        name: USER_NAME,\n        time: dateNow,\n        msg: \"\",\n        chatType: 2,\n        //信息类型，0文字，1图片, 2文件\n        extend: {\n          fileType: \"\" //(1word，2excel，3ppt，4pdf，5zpi, 6txt)\n        },\n\n        uid: \"jcm\"\n      };\n      let files = e.target.files[0]; //图片文件名\n      chatMsg.msg = files;\n      if (files) {\n        switch (files.type) {\n          case \"application/msword\":\n          case \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\":\n            chatMsg.extend.fileType = 1;\n            break;\n          case \"application/vnd.ms-excel\":\n          case \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\":\n            chatMsg.extend.fileType = 2;\n            break;\n          case \"application/vnd.ms-powerpoint\":\n          case \"application/vnd.openxmlformats-officedocument.presentationml.presentation\":\n            chatMsg.extend.fileType = 3;\n            break;\n          case \"application/pdf\":\n            chatMsg.extend.fileType = 4;\n            break;\n          case \"application/zip\":\n          case \"application/x-zip-compressed\":\n            chatMsg.extend.fileType = 5;\n            break;\n          case \"text/plain\":\n            chatMsg.extend.fileType = 6;\n            break;\n          default:\n            chatMsg.extend.fileType = 0;\n        }\n        this.sendMsg(chatMsg);\n        e.target.files = null;\n      }\n    }\n  }\n};","map":{"version":3,"names":["animation","getNowTime","JCMFormatDate","getChatMsg","getCompletion","getChatCompletion","createImage","createImageEdit","createImageVariations","createTranscription","createTranslation","createEmbeddings","HeadPortrait","Emoji","FileCard","base","MarkdownItVue","html2canvas","AI_HEAD_IMG_URL","USER_HEAD_IMG_URL","USER_NAME","components","props","storeStatu","Number","settingInfo","Object","frinedInfo","default","watch","data","fileArrays","inputsStatus","rows","buttonStatus","acqStatus","chatList","inputMsg","showEmoji","friendInfo","srcImgList","recording","audioChunks","screenshot","contentBackImageUrl","updateImage","personInfoSpan","created","window","addEventListener","handleResize","destoryed","removeEventListener","methods","innerWidth","textareaMsg","document","getElementById","style","marginLeft","newLine","event","text","$refs","textInput","value","assignmentMesList","msgList","getMesList","clearMsgList","updateContentImageUrl","imgUrl","sc","contentEle","querySelector","options","backgroundColor","then","canvas","toBlob","blob","url","URL","createObjectURL","link","createElement","download","href","click","revokeObjectURL","contextualAssemblyData","conversation","chat","uid","my","msg","push","id","ai","startRecording","navigator","mediaDevices","getUserMedia","audio","stream","recorder","MediaRecorder","start","$message","message","catch","error","type","stopRecording","stop","ondataavailable","Blob","file","File","lastModified","Date","now","formData","FormData","append","TemperatureAudio","translateEnglish","KeyMsg","$nextTick","language","waitMsg","sendMsg","scrollBottom","cosineSimilarity","a","b","dotProduct","reduce","acc","curr","i","normA","Math","sqrt","normB","sendText","dateNow","params","openChangePicture","n","size","chatMsg","headImg","name","time","chatType","imgInfo","imgResMsg","extend","imgType","openProductionPicture","prompt","model","max_tokens","MaxTokens","temperature","Temperature","top_p","TopP","presence_penalty","PresencePenalty","frequency_penalty","FrequencyPenalty","chatBeforResMsg","chatCompletion","completion","$emit","$parent","updateMoneyInfo","messages","map","item","role","speaker","content","currentResLocation","length","_this","fetch","baseUrl","method","timeout","body","JSON","stringify","headers","Authorization","Accept","response","reader","getReader","readStream","read","done","reminder","decoded","TextDecoder","decode","decodedArray","split","forEach","trim","parse","choices","delta","console","status","decodeds","resetUpdate","scrollDom","chatContent","scrollHeight","offsetHeight","clickEmoji","sendEmoji","sendImg","e","target","files","FileReader","readAsDataURL","onloadend","result","sendFile","fileType"],"sources":["src/view/pages/chatHome/chatwindow.vue"],"sourcesContent":["<template>\n  <div class=\"chat-window\">\n    <div class=\"top\">\n      <el-row style=\"height: 70px;\">\n\n        <el-col :span=\"personInfoSpan[0]\">\n          <div class=\"head-pic\">\n            <HeadPortrait :imgUrl=\"frinedInfo.headImg\"></HeadPortrait>\n          </div>\n        </el-col>\n\n        <el-col :span=\"personInfoSpan[1]\">\n          <div class=\"info-detail\">\n            <div class=\"name\">{{ frinedInfo.name }}</div>\n            <div class=\"detail\">{{ frinedInfo.detail }}</div>\n          </div>\n        </el-col>\n        <el-col :span=\"personInfoSpan[2]\">\n          <div class=\"other-fun\">\n            <!-- <label @click=\"sc\">\n              <span class=\"iconfont icon-snapchat\"></span>\n            </label> -->\n            <label for=\"docFile\">\n              <span class=\"iconfont icon-wenjian\"></span>\n            </label>\n            <label for=\"imgFile\">\n              <span class=\"iconfont icon-tupian\"></span>\n            </label>\n            <input type=\"file\" name=\"\" id=\"imgFile\" @change=\"sendImg\" accept=\"image/*\" />\n            <input type=\"file\" name=\"\" id=\"docFile\" @change=\"sendFile\" accept=\"application/*,text/*\" />\n            <!-- accept=\"application/*\" -->\n          </div>\n        </el-col>\n      </el-row>\n\n    </div>\n    <div v-show=\"!acqStatus\">\n      <div class=\"line\"></div>\n    </div>\n\n    <div class=\"botoom\" style=\"background-color:rgb(50, 54, 68);\">\n      <!-- :style=\"{ backgroundImage: 'url(' + contentBackImageUrl + ')' }\" -->\n      <div class=\"chat-content\" id=\"chat-content\" ref=\"chatContent\">\n        <div class=\"chat-wrapper\" v-for=\"item in chatList\" :key=\"item.id\">\n          <div class=\"chat-friend\" v-if=\"item.uid !== 'jcm'\">\n            <div class=\"chat-text\" v-if=\"item.chatType == 0\">\n              <el-row :gutter=\"20\">\n                <el-col :span=\"2\">\n                  <svg t=\"1679666016648\" @click=\"$copy(item.msg, '已复制')\" class=\"icon\" viewBox=\"0 0 1024 1024\" version=\"1.1\"\n                    xmlns=\"http://www.w3.org/2000/svg\" p-id=\"6241\" width=\"22\" height=\"22\">\n                    <path\n                      d=\"M661.333333 234.666667A64 64 0 0 1 725.333333 298.666667v597.333333a64 64 0 0 1-64 64h-469.333333A64 64 0 0 1 128 896V298.666667a64 64 0 0 1 64-64z m-21.333333 85.333333H213.333333v554.666667h426.666667v-554.666667z m191.829333-256a64 64 0 0 1 63.744 57.856l0.256 6.144v575.701333a42.666667 42.666667 0 0 1-85.034666 4.992l-0.298667-4.992V149.333333H384a42.666667 42.666667 0 0 1-42.368-37.674666L341.333333 106.666667a42.666667 42.666667 0 0 1 37.674667-42.368L384 64h447.829333z\"\n                      fill=\"#909399\" p-id=\"6242\"></path>\n                  </svg>\n                </el-col>\n                <el-col :span=\"21\">\n                </el-col>\n              </el-row>\n\n              <markdown-it-vue :content=\"item.msg.trim()\" />\n            </div>\n            <div class=\"chat-img\" v-if=\"item.chatType == 1\">\n              <img :src=\"item.msg\" alt=\"表情\" v-if=\"item.extend.imgType == 1\" style=\"width: 100px; height: 100px\" />\n              <el-image style=\"border-radius: 10px\" :src=\"item.msg\" :preview-src-list=\"srcImgList\" v-else>\n              </el-image>\n            </div>\n            <div class=\"chat-img\" v-if=\"item.chatType == 2\">\n              <div class=\"word-file\">\n                <FileCard :fileType=\"item.extend.fileType\" :file=\"item.msg\"></FileCard>\n              </div>\n            </div>\n            <div class=\"info-time\">\n              <img :src=\"item.headImg\" alt=\"\" />\n              <span>{{ item.name }}</span>\n              <span>{{ item.time }}</span>\n            </div>\n          </div>\n          <div class=\"chat-me\" v-else>\n            <div class=\"chat-text\" v-if=\"item.chatType == 0\">\n              <span style=\"font-size:16px\">{{ item.msg }}</span>\n            </div>\n            <div class=\"chat-img\" v-if=\"item.chatType == 1\">\n              <img :src=\"item.msg\" alt=\"表情\" v-if=\"item.extend.imgType == 1\" style=\"width: 100px; height: 100px\" />\n              <el-image style=\"max-width: 300px; border-radius: 10px\" :src=\"item.msg\" :preview-src-list=\"srcImgList\"\n                v-else>\n              </el-image>\n            </div>\n            <div class=\"chat-img\" v-if=\"item.chatType == 2\">\n              <div class=\"word-file\">\n                <FileCard :fileType=\"item.extend.fileType\" :file=\"item.msg\"></FileCard>\n              </div>\n            </div>\n            <div class=\"info-time\">\n              <span>{{ item.name }}</span>\n              <span>{{ item.time }}</span>\n              <img :src=\"item.headImg\" alt=\"\" />\n            </div>\n          </div>\n        </div>\n      </div>\n      <div class=\"chatInputs\" >\n        <!--表情-->\n        <div class=\"emoji boxinput\" @click=\"clickEmoji\" v-show=\"buttonStatus\">\n          <img src=\"@/assets/img/emoji/smiling-face.png\" alt=\"\" />\n        </div>\n        <!--录音-->\n        <div class=\"luyin boxinput\" @click=\"stopRecording\" v-if=\"recording\" v-show=\"buttonStatus\">\n          <i class=\"el-icon-microphone\" style=\"margin-top: 17%;\"></i>\n        </div>\n        <div class=\"luyin boxinput\" @click=\"startRecording\" v-if=\"!recording\" v-show=\"buttonStatus\">\n          <i class=\"el-icon-turn-off-microphone\" style=\"margin-top: 17%;\"></i>\n        </div>\n        <!--emo表情列表-->\n        <div class=\"emoji-content\" v-show=\"buttonStatus\">\n          <Emoji v-show=\"showEmoji\" @sendEmoji=\"sendEmoji\" @closeEmoji=\"clickEmoji\"></Emoji>\n        </div>\n        <!--输入框-->\n        <el-input type=\"textarea\"  id=\"textareaMsg\" ref=\"textInput\" :autosize=\"{}\"  class=\"textarea\" v-model=\"inputMsg\" maxlength=\"2000\" style=\"margin-left: 2%;margin-top: 3px;min-height: 51px;max-height:400px;max-width: 80%;min-width: 45%;  height: auto;\"  @keydown.enter.stop\n            @keydown.enter.shift.prevent=\"insertLineBreak\" placeholder=\"在此输入您的提示词~\"></el-input>\n        <!--发送-->\n        <div>\n          <div class=\"send boxinput\" @click=\"sendText\">\n            <img src=\"@/assets/img/emoji/rocket.png\" alt=\"\" />\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { animation, getNowTime, JCMFormatDate } from \"@/util/util\";\nimport { getChatMsg, getCompletion, getChatCompletion, createImage, createImageEdit, createImageVariations, createTranscription, createTranslation,createEmbeddings } from \"@/api/getData\";\nimport HeadPortrait from \"@/components/HeadPortrait\";\nimport Emoji from \"@/components/Emoji\";\nimport FileCard from \"@/components/FileCard.vue\";\nimport base from \"@/api/index\";\nimport MarkdownItVue from 'markdown-it-vue'\nimport 'markdown-it-vue/dist/markdown-it-vue.css'\nimport html2canvas from 'html2canvas';\nimport { AI_HEAD_IMG_URL, USER_HEAD_IMG_URL, USER_NAME } from '@/store/mutation-types'\n\nexport default {\n  components: {\n    HeadPortrait,\n    Emoji,\n    FileCard,\n    MarkdownItVue\n  },\n  props: {\n    storeStatu: Number,\n    settingInfo: Object,\n    frinedInfo: Object,\n    default() {\n      return {};\n    },\n  },\n  watch: {\n  },\n  data() {\n    return {\n      fileArrays:[],\n      inputsStatus:true,\n      rows: 1,\n      //是否显示表情和录音按钮\n      buttonStatus: true,\n      //是否在接收消息中，如果是则true待发送状态，如果是false则是等待消息转圈状态\n      acqStatus: true,\n      chatList: [],\n      inputMsg: \"\",\n      showEmoji: false,\n      friendInfo: {},\n      srcImgList: [],\n      recording: false,\n      audioChunks: [],\n      screenshot: \"\",\n      contentBackImageUrl: \"https://bpic.51yuansu.com/backgd/cover/00/31/39/5bc8088deeedd.jpg?x-oss-process=image/resize,w_780\",\n      updateImage: null,\n      // 是否隐藏对话框上方介绍（空间局促时隐藏）\n      personInfoSpan: [2, 17, 5],\n    };\n  },\n\n\n  created() {\n    window.addEventListener('resize', this.handleResize)\n    this.handleResize()\n  },\n\n  destoryed() {\n    window.removeEventListener('resize', this.handleResize)\n  },\n  methods: {\n    //监听窗口的变化\n    handleResize() {\n      if (window.innerWidth <= 700) {\n        this.buttonStatus = false\n        var textareaMsg = document.getElementById(\"textareaMsg\");\n        textareaMsg.style.marginLeft = \"0px\";\n        this.personInfoSpan = [14, 0, 10];\n      } else {\n        this.buttonStatus = true\n        this.personInfoSpan = [2, 17, 5];\n      };\n    },\n    newLine(event) {\n      this.rows += 1;\n      let text = this.$refs.textInput.value;\n      text += '\\n';\n      this.$refs.textInput.value = text;\n    },\n    //赋值对话列表\n    assignmentMesList(msgList) {\n      this.chatList = msgList\n    },\n    //获取对话列表\n    getMesList() {\n      return this.chatList\n    },\n    //清除当前对话列表\n    clearMsgList() {\n      this.chatList = []\n    },\n    //更新内容背景图片\n    updateContentImageUrl(imgUrl) {\n      this.contentBackImageUrl = imgUrl\n    },\n    //截图\n    sc() {\n      const contentEle = document.querySelector('#chat-content')\n      const options = {\n        backgroundColor: \"rgb(39, 42, 55)\" // 设置截图背景颜色\n      };\n      html2canvas(contentEle, options).then(canvas => {\n        canvas.toBlob(blob => {\n          const url = URL.createObjectURL(blob);\n          const link = document.createElement('a');\n          link.download = 'screenshot.png';\n          link.href = url;\n          link.click();\n          URL.revokeObjectURL(url);\n        });\n      })\n    },\n    //组装上下文数据\n    contextualAssemblyData() {\n      const conversation = []\n      for (var chat of this.chatList) {\n        if (chat.uid == 'jcm') {\n          let my = { 'speaker': 'user', 'text': chat.msg }\n          conversation.push(my)\n        } else if (chat.uid == this.frinedInfo.id) {\n          let ai = { 'speaker': 'agent', 'text': chat.msg }\n          conversation.push(ai)\n        }\n      }\n      return conversation\n    },\n    //开始录音\n    startRecording() {\n      navigator.mediaDevices.getUserMedia({ audio: true }).then((stream) => {\n        this.recorder = new MediaRecorder(stream);\n        this.recorder.addEventListener('dataavailable', event => {\n          this.audioChunks.push(event.data)\n        })\n        this.recording = true\n        this.recorder.start()\n        // 在这里使用录音器\n        this.$message({\n          message: \"开始录音咯！\",\n        });\n      }).catch((error) => {\n        this.$message({\n          type: \"error\",\n          message: \"获取音频流失败啦！\",\n        });\n      });\n    },\n    //停止录音\n    async stopRecording() {\n      this.recorder.stop()\n      this.recording = false\n      this.recorder.ondataavailable = (event) => {\n        const blob = new Blob([event.data], { type: 'audio/wav' });\n        const file = new File([blob], 'recording.wav', {\n          type: 'audio/wav',\n          lastModified: Date.now()\n        });\n        const formData = new FormData()\n        formData.append('file', file)\n        formData.append('model', \"whisper-1\")\n        formData.append('temperature', this.settingInfo.TemperatureAudio)\n        formData.append('response_format', \"text\")\n\n        if (this.settingInfo.translateEnglish) {\n          createTranslation(formData, this.settingInfo.KeyMsg).then(data => {\n            this.$nextTick(() => {\n              this.inputMsg = data;\n            });\n          })\n        } else {\n          formData.append('language', this.settingInfo.language)\n\n          createTranscription(formData, this.settingInfo.KeyMsg).then(data => {\n            this.$nextTick(() => {\n              this.inputMsg = data;\n            });\n          })\n        }\n      }\n      this.$message({\n        message: \"结束录音咯！\",\n      });\n    },\n    //发送消息时等待\n    waitMsg() {\n      this.$message({\n        message: this.frinedInfo.id + \":\" + \"客观稍等片刻，马上告诉您！~\",\n      });\n    },\n    //发送信息\n    sendMsg(msgList) {\n      this.chatList.push(msgList);\n      this.scrollBottom();\n    },\n    // 在组件或页面外部声明计算余弦相似度的函数\n    cosineSimilarity(a, b) {\n      const dotProduct = a.reduce((acc, curr, i) => acc + curr * b[i], 0);\n      const normA = Math.sqrt(a.reduce((acc, curr) => acc + curr * curr, 0));\n      const normB = Math.sqrt(b.reduce((acc, curr) => acc + curr * curr, 0));\n      return dotProduct / (normA * normB);\n    },\n    //发送文字信息\n    sendText() {\n      // if(this.settingInfo.readefile){\n      //   console.log(this.fileArrays)\n      //   const formData = new FormData();\n      //   formData.append(\"model\", \"text-embedding-ada-002\");\n      //   formData.append(\"input\", \"吕世昊是谁?\");\n      //   createEmbeddings(formData,this.settingInfo.KeyMsg).then(data => {\n      //     const inputEmbedding=data.data[0]\n      //     // const similarText = this.findMostSimilarEmbedding(, this.fileArrays);\n\n      //     // 计算每个句子embedding与输入数据embedding之间的相似度\n      //     const similarities = this.cosineSimilarity(this.fileArrays.embedding, inputEmbedding.embedding)\n      //     const similaritiesArr=[];\n      //     console.log(similarities)\n      //     similaritiesArr.push(similarities)\n      //     // 对相似度进行排名，选择与输入数据最相似的句子或文章段落作为匹配结果\n      //     const topMatchIndex = similaritiesArr.reduce((maxIndex, similarity, index) => similarity > similaritiesArr[maxIndex] ? index : maxIndex, 0)\n          \n      //     console.log(topMatchIndex)\n      //     const topMatchText = sentences[topMatchIndex]\n      //     console.log('最匹配的句子是：', topMatchText)\n      //     // console.log('最相似的文本为：', similarText);\n      //   })\n\n        \n      //   // const configuration = new Configuration({\n      //   //   apiKey:  ,\n      //   // });\n      //   // const openai = new OpenAIApi(configuration);\n      //   // const response = openai.embeddings({\n      //   //   model: 'text-embedding-ada-002',\n      //   //   input:\"text\"\n      //   // });\n      //   // console.log(response)\n\n      //   return\n      // }\n      this.rows = 1;\n      // document.getElementById(\"textareaMsg\").style.height = \"26px\";\n      this.$nextTick(() => {\n        this.acqStatus = false\n      })\n      const dateNow = JCMFormatDate(getNowTime());\n\n      let params = {}\n\n      if (this.settingInfo.openChangePicture) {\n        if (this.updateImage == null) {\n          this.$nextTick(() => {\n            this.acqStatus = true\n          });\n          this.$message({\n            message: \"编辑图片模式：请您聊天窗口右上角先上传图片，再发送修改的内容~\",\n            type: \"warning\",\n          });\n          return\n        } else {\n          // 通过验证后，上传文件\n          const formData = new FormData();\n          formData.append(\"image\", this.updateImage);\n          formData.append(\"prompt\", this.inputMsg);\n          formData.append(\"n\", this.settingInfo.n);\n          formData.append(\"size\", this.settingInfo.size);\n\n          const dateNow = JCMFormatDate(getNowTime());\n\n          let chatMsg = {\n            headImg: USER_HEAD_IMG_URL,\n            name: USER_NAME,\n            time: dateNow,\n            msg: this.inputMsg,\n            chatType: 0, //信息类型，0文字，1图片\n            uid: \"jcm\", //uid\n          };\n\n          this.sendMsg(chatMsg);\n          this.inputMsg = \"\";\n\n          createImageEdit(formData, this.settingInfo.KeyMsg).then(data => {\n            for (var imgInfo of data) {\n              let imgResMsg = {\n                headImg: AI_HEAD_IMG_URL,\n                name: this.frinedInfo.name,\n                time: JCMFormatDate(getNowTime()),\n                msg: imgInfo.url,\n                chatType: 1, //信息类型，0文字，1图片\n                extend: {\n                  imgType: 2, //(1表情，2本地图片)\n                },\n                uid: this.frinedInfo.id, //uid\n              };\n              this.sendMsg(imgResMsg);\n              this.srcImgList.push(imgInfo.url);\n            }\n            this.updateImage = null\n            this.acqStatus = true\n          })\n          return\n        }\n      }\n\n      if (this.inputMsg) {\n        let chatMsg = {\n          headImg: USER_HEAD_IMG_URL,\n          name: USER_NAME,\n          time: dateNow,\n          msg: this.inputMsg,\n          chatType: 0, //信息类型，0文字，1图片\n          uid: \"jcm\", //uid\n        };\n        this.sendMsg(chatMsg);\n\n        //如果是图片模式则进入待开发不过可用改状态使用\n        if (this.settingInfo.openProductionPicture) {\n          params.prompt = this.inputMsg,\n            params.n = this.settingInfo.n,\n            params.size = this.settingInfo.size,\n            createImage(params, this.settingInfo.KeyMsg).then(data => {\n              for (var imgInfo of data) {\n                let imgResMsg = {\n                  headImg: AI_HEAD_IMG_URL,\n                  name: this.frinedInfo.name,\n                  time: JCMFormatDate(getNowTime()),\n                  msg: imgInfo.url,\n                  chatType: 1, //信息类型，0文字，1图片\n                  extend: {\n                    imgType: 2, //(1表情，2本地图片)\n                  },\n                  uid: this.frinedInfo.id, //uid\n                };\n                this.sendMsg(imgResMsg);\n                this.srcImgList.push(imgInfo.url);\n              }\n              this.acqStatus = true\n            })\n        } else {\n          //如果是文字模式则进入\n          params.model = this.frinedInfo.id,\n            params.max_tokens = this.settingInfo.MaxTokens,\n            params.temperature = this.settingInfo.Temperature,\n            params.top_p = this.settingInfo.TopP,\n            params.presence_penalty = this.settingInfo.PresencePenalty,\n            params.frequency_penalty = this.settingInfo.FrequencyPenalty\n\n          let chatBeforResMsg = {\n            headImg: AI_HEAD_IMG_URL,\n            name: this.frinedInfo.name,\n            time: JCMFormatDate(getNowTime()),\n            msg: \"\",\n            chatType: 0, //信息类型，0文字，1图片\n            uid: this.frinedInfo.id, //uid\n          };\n          if (this.frinedInfo.id === \"gpt-3.5-turbo\" || this.frinedInfo.id === \"gpt-3.5-turbo-0301\") {\n            this.chatCompletion(params, chatBeforResMsg)\n          } else {\n            this.completion(params, chatBeforResMsg)\n          }\n        }\n        if (this.storeStatu == 0) {\n          this.$emit('personCardSort', this.frinedInfo.id)\n\n        } else if (this.storeStatu == 1) {\n          this.$emit('fineTunesCardSort', this.frinedInfo.id)\n        }\n        this.inputMsg = \"\";\n        this.$parent.updateMoneyInfo();\n      } else {\n        this.$nextTick(() => {\n          this.acqStatus = true\n        });\n        this.$message({\n          message: \"消息不能为空哦~\",\n          type: \"warning\",\n        });\n      }\n    },\n    async chatCompletion(params, chatBeforResMsg) {\n      let conversation = this.contextualAssemblyData();\n      params.messages = conversation.map(item => {\n        return {\n          role: item.speaker === 'user' ? 'user' : 'assistant',\n          content: item.text\n        }\n      })\n      params.stream = true\n      //新增一个空的消息\n      this.sendMsg(chatBeforResMsg);\n\n      const currentResLocation = this.chatList.length - 1\n      let _this = this\n      try {\n        await fetch(\n          base.baseUrl + '/v1/chat/completions', {\n          method: \"POST\",\n          timeout: 10000 ,\n          body: JSON.stringify({\n            ...params\n          }),\n          headers: {\n            Authorization: 'Bearer ' + this.settingInfo.KeyMsg,\n            \"Content-Type\": \"application/json\",\n            Accept: \"application/json\",\n          },\n        }\n        ).then(response => {\n          const reader = response.body.getReader();\n\n          function readStream(reader) {\n            return reader.read().then(({ done, value }) => {\n              if (done) {\n                return;\n              }\n              if (!_this.chatList[currentResLocation].reminder) {\n                _this.chatList[currentResLocation].reminder = \"\";\n              }\n              let decoded = new TextDecoder().decode(value);\n              decoded = _this.chatList[currentResLocation].reminder + decoded;\n              let decodedArray = decoded.split(\"data: \");\n\n              decodedArray.forEach(decoded => {\n                if (decoded !== \"\") {\n                  if (decoded.trim() === \"[DONE]\") {\n                    return;\n                  } else {\n                    const response = JSON.parse(decoded).choices[0].delta.content ? JSON.parse(decoded).choices[0].delta.content : \"\";\n                    _this.chatList[currentResLocation].msg = _this.chatList[currentResLocation].msg + response\n                    _this.scrollBottom();\n                  }\n                }\n              });\n              return readStream(reader);\n            });\n          }\n          _this.chatList[currentResLocation].msg = _this.chatList[currentResLocation].msg + \":grinning:\"\n          readStream(reader);\n          this.$nextTick(() => {\n            this.acqStatus = true\n          });\n        });\n      } catch (error) {\n        console.error(error);\n      }\n    },\n    async completion(params, chatBeforResMsg) {\n      params.stop = \" END\"\n      params.prompt = this.inputMsg\n      params.stream = true\n      //新增一个空的消息\n      this.sendMsg(chatBeforResMsg);\n      const currentResLocation = this.chatList.length - 1\n      let _this = this\n      try {\n        await fetch(\n          base.baseUrl + '/v1/completions', {\n          method: \"POST\",\n          timeout: 10000 ,\n          body: JSON.stringify({\n            ...params\n          }),\n          headers: {\n            Authorization: 'Bearer ' + this.settingInfo.KeyMsg,\n            \"Content-Type\": \"application/json\"\n          },\n        }\n        ).then(response => {\n          if(response.status==404){\n            this.$message.error(\"模型已被删除或已取消...\")\n            this.$nextTick(() => {\n              this.acqStatus = true\n            });\n            return\n          }\n          const reader = response.body.getReader();\n\n          function readStream(reader) {\n            return reader.read().then(({ done, value }) => {\n              if (done) {\n                return;\n              }\n              let decodeds = new TextDecoder().decode(value);\n\n              let decodedArray = decodeds.split(\"data: \")\n\n              decodedArray.forEach(decoded => {\n                if (decoded !== \"\") {\n                  if (decoded.trim() === \"[DONE]\") {\n                    return;\n                  } else {\n                    const response = JSON.parse(decoded).choices[0].text;\n                    _this.chatList[currentResLocation].msg = _this.chatList[currentResLocation].msg + response\n                  }\n                }\n              });\n              return readStream(reader);\n            });\n          }\n          this.$nextTick(() => {\n            this.acqStatus = true\n          });\n          _this.chatList[currentResLocation].msg = _this.chatList[currentResLocation].msg + \":grinning:\"\n          readStream(reader);\n        })\n      } catch (error) {\n        \n      }\n\n    },\n    resetUpdate() {\n      this.updateImage = null\n    },\n    //获取窗口高度并滚动至最底层\n    scrollBottom() {\n      this.$nextTick(() => {\n        const scrollDom = this.$refs.chatContent;\n        animation(scrollDom, scrollDom.scrollHeight - scrollDom.offsetHeight);\n      });\n    },\n    //关闭标签框\n    clickEmoji() {\n      this.showEmoji = !this.showEmoji;\n    },\n\n    //发送表情\n    sendEmoji(msg) {\n      const dateNow = JCMFormatDate(getNowTime());\n      let chatMsg = {\n        headImg: USER_HEAD_IMG_URL,\n        name: USER_NAME,\n        time: dateNow,\n        msg: msg,\n        chatType: 1, //信息类型，0文字，1图片\n        extend: {\n          imgType: 1, //(1表情，2本地图片)\n        },\n        uid: \"jcm\",\n      };\n      this.sendMsg(chatMsg);\n      this.clickEmoji();\n    },\n    //发送本地图片\n    sendImg(e) {\n      this.acqStatus = false\n      //获取文件\n      const file = e.target.files[0];\n\n      // 验证文件类型是否为PNG格式\n      if (file.type !== \"image/png\") {\n        this.$message({\n          message: \"请上传一个有效的PNG文件~\",\n          type: \"warning\",\n        });\n        this.$nextTick(() => {\n          this.acqStatus = true\n        });\n        return;\n      }\n\n      // 验证文件大小是否小于4MB\n      if (file.size > 4 * 1024 * 1024) {\n        this.$message({\n          message: \"请上传一个小于4MB的文件~\",\n          type: \"warning\",\n        });\n        this.$nextTick(() => {\n          this.acqStatus = true\n        });\n        return;\n      }\n\n      if (this.settingInfo.openChangePicture) {\n        this.updateImage = file\n        this.$message({\n          message: \"图片上传完成啦，请给我提示进行编辑~\",\n          type: \"info\",\n        });\n        e.target.files = null;\n        this.$nextTick(() => {\n          this.acqStatus = true\n        });\n        return\n      }\n      // 通过验证后，上传文件\n      const formData = new FormData();\n      formData.append(\"image\", file);\n      formData.append(\"n\", this.settingInfo.n);\n      formData.append(\"size\", this.settingInfo.size);\n\n      const dateNow = JCMFormatDate(getNowTime());\n      let _this = this;\n\n      let chatMsg = {\n        headImg: USER_HEAD_IMG_URL,\n        name: USER_NAME,\n        time: dateNow,\n        msg: \"\",\n        chatType: 1, //信息类型，0文字，1图片, 2文件\n        extend: {\n          imgType: 2, //(1表情，2本地图片)\n        },\n        uid: \"jcm\",\n      };\n\n      if (!e || !window.FileReader) return; // 看是否支持FileReader\n      let reader = new FileReader();\n      reader.readAsDataURL(file); // 关键一步，在这里转换的\n      reader.onloadend = function () {\n        chatMsg.msg = this.result; //赋值\n        _this.srcImgList.push(chatMsg.msg);\n      };\n      this.sendMsg(chatMsg);\n\n      createImageVariations(formData, this.settingInfo.KeyMsg).then(data => {\n        for (var imgInfo of data) {\n          let imgResMsg = {\n            headImg: AI_HEAD_IMG_URL,\n            name: this.frinedInfo.name,\n            time: JCMFormatDate(getNowTime()),\n            msg: imgInfo.url,\n            chatType: 1, //信息类型，0文字，1图片\n            extend: {\n              imgType: 2, //(1表情，2本地图片)\n            },\n            uid: this.frinedInfo.id, //uid\n          };\n          this.sendMsg(imgResMsg);\n          this.srcImgList.push(imgInfo.url);\n        }\n        this.acqStatus = true\n      })\n      e.target.files = null;\n    },\n   \n    //发送文件\n    sendFile(e) {\n      // let file = e.target.files[0];\n      // let reader = new FileReader();\n      // reader.readAsText(file);\n      // let _this=this\n      // reader.onload = function(event) {\n      //   let text = event.target.result;\n      //   //处理文件数据\n      //   const delimiters = ['.', '?', '!', '\\n',':',\",\"];\n      //   let result = [];\n      //   for (let i = 0; i < text.length; i++) {\n      //     let current = '';\n      //     while (i < text.length && !delimiters.includes(text[i])) {\n      //       current += text[i];\n      //       i++;\n      //     }\n      //     // 加入句子，并去除前后空格\n      //     if (current.trim()) {\n      //       result.push(current.trim());\n      //     }\n      //   }\n      //   const formData = new FormData()\n      //   formData.append(\"model\", \"text-embedding-ada-002\");\n      //   formData.append(\"input\", result);\n      //   createEmbeddings(formData,_this.settingInfo.KeyMsg).then(data => {\n      //     _this.fileArrays = data.data[0]\n      //   })\n      // };  \n      const dateNow = JCMFormatDate(getNowTime());\n      let chatMsg = {\n        headImg: USER_HEAD_IMG_URL,\n        name: USER_NAME,\n        time: dateNow,\n        msg: \"\",\n        chatType: 2, //信息类型，0文字，1图片, 2文件\n        extend: {\n          fileType: \"\", //(1word，2excel，3ppt，4pdf，5zpi, 6txt)\n        },\n        uid: \"jcm\",\n      };\n      let files = e.target.files[0]; //图片文件名\n      chatMsg.msg = files;\n\n      if (files) {\n        switch (files.type) {\n          case \"application/msword\":\n          case \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\":\n            chatMsg.extend.fileType = 1;\n            break;\n          case \"application/vnd.ms-excel\":\n          case \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\":\n            chatMsg.extend.fileType = 2;\n            break;\n          case \"application/vnd.ms-powerpoint\":\n          case \"application/vnd.openxmlformats-officedocument.presentationml.presentation\":\n            chatMsg.extend.fileType = 3;\n            break;\n          case \"application/pdf\":\n            chatMsg.extend.fileType = 4;\n            break;\n          case \"application/zip\":\n          case \"application/x-zip-compressed\":\n            chatMsg.extend.fileType = 5;\n            break;\n          case \"text/plain\":\n            chatMsg.extend.fileType = 6;\n            break;\n          default:\n            chatMsg.extend.fileType = 0;\n        }\n        this.sendMsg(chatMsg);\n        e.target.files = null;\n      }\n    }\n  },\n};\n</script>\n\n\n<style lang=\"scss\" scoped>\n\n::v-deep{\n  .el-textarea__inner{\n  background-color: rgb(66, 70, 86);\n    border-radius: 15px;\n    border: 2px solid rgb(34, 135, 225);\n    /* padding: 10px; */\n    box-sizing: border-box;\n    transition: 0.2s;\n    font-size: 20px;\n    color: #fff;\n    font-weight: 100;\n    /* margin: 0 20px; */\n    width: 98%;\n    height: 100%;\n\n}\n} \n\npre {\n  background-color: #211f1f !important ;\n  border-radius: 20px !important;\n  box-shadow: 0px 0px 9px 0px #000000 !important;\n  color: #ffff !important;\n}\n.hljs{\n  background-color: #211f1f !important ;\n  border-radius: 20px !important;\n  box-shadow: 0px 0px 9px 0px #000000 !important;\n  color: #ffff !important;\n}\ntextarea::-webkit-scrollbar {\n  width: 3px;\n  /* 设置滚动条宽度 */\n}\n\ntextarea::-webkit-scrollbar-thumb {\n  background-color: rgb(66, 70, 86);\n  /* 设置滚动条滑块的背景色 */\n  border-radius: 50%;\n  /* 设置滑块的圆角 */\n}\n\n.spinner {\n  width: 50px;\n  height: 50px;\n  animation: spin 1s infinite linear;\n}\n\n@keyframes spin {\n  0% {\n    transform: rotate(0deg);\n  }\n\n  100% {\n    transform: rotate(360deg);\n  }\n}\n\n.chat-window {\n  width: 100%;\n  height: 100%;\n  margin-left: 20px;\n  position: relative;\n\n  .top {\n    &::after {\n      content: \"\";\n      display: block;\n      clear: both;\n    }\n\n    .head-pic {\n      float: left;\n    }\n\n    .info-detail {\n      float: left;\n      margin: 5px 20px 0;\n\n      .name {\n        font-size: 20px;\n        font-weight: 600;\n        color: #fff;\n      }\n\n      .detail {\n        color: #9e9e9e;\n        font-size: 12px;\n        margin-top: 2px;\n      }\n    }\n\n    .other-fun {\n      float: right;\n      margin-top: 20px;\n\n      span {\n        margin-left: 30px;\n        cursor: pointer;\n      }\n\n      // .icon-tupian {\n\n      // }\n      input {\n        display: none;\n      }\n    }\n  }\n\n\n  .textarea {\n    &:focus {\n      outline: none;\n    }\n  }\n\n  .botoom {\n    width: 100%;\n    height: 85vh;\n    background-size: 100% 100%;\n    // background-color: rgb(50, 54, 68);\n    border-radius: 20px;\n    padding: 20px;\n    box-sizing: border-box;\n    position: relative;\n\n    .chat-content {\n      width: 100%;\n      height: 85%;\n      overflow-y: scroll;\n      padding: 20px;\n      box-sizing: border-box;\n\n      &::-webkit-scrollbar {\n        width: 3px;\n        /* 设置滚动条宽度 */\n      }\n\n      &::-webkit-scrollbar-thumb {\n        background-color: rgb(66, 70, 86);\n        /* 设置滚动条滑块的背景色 */\n        border-radius: 50%;\n        /* 设置滑块的圆角 */\n      }\n\n      .chat-friend {\n        width: 100%;\n        float: left;\n        margin-bottom: 20px;\n        position: relative;\n        display: flex;\n        flex-direction: column;\n        justify-content: flex-end;\n        align-items: flex-start;\n\n        .chat-text {\n          float: left;\n          max-width: 90%;\n          padding: 15px;\n          border-radius: 20px 20px 20px 5px;\n          background-color: #fff;\n        }\n\n        .chat-img {\n          img {\n            max-width: 300px;\n            max-height: 200px;\n            border-radius: 10px;\n          }\n        }\n\n        .info-time {\n          margin: 10px 0;\n          color: #fff;\n          font-size: 14px;\n          display: flex;\n          justify-content: flex-start;\n\n          img {\n            width: 30px;\n            height: 30px;\n            border-radius: 50%;\n            vertical-align: middle;\n            margin-right: 10px;\n          }\n\n          span {\n            line-height: 30px;\n          }\n\n          span:last-child {\n            color: rgb(101, 104, 115);\n            margin-left: 10px;\n            vertical-align: middle;\n          }\n        }\n      }\n\n      .chat-me {\n        width: 100%;\n        float: right;\n        margin-bottom: 20px;\n        position: relative;\n        display: flex;\n        flex-direction: column;\n        justify-content: flex-end;\n        align-items: flex-end;\n\n        .chat-text {\n          float: right;\n          max-width: 90%;\n          padding: 15px;\n          border-radius: 20px 20px 5px 20px;\n          background-color: #95ec69;\n          color: #000;\n        }\n\n        .chat-img {\n          img {\n            max-width: 300px;\n            max-height: 200px;\n            border-radius: 10px;\n          }\n        }\n\n        .info-time {\n          margin: 10px 0;\n          color: #fff;\n          font-size: 14px;\n          display: flex;\n          justify-content: flex-end;\n\n          img {\n            width: 30px;\n            height: 30px;\n            border-radius: 50%;\n            vertical-align: middle;\n            margin-left: 10px;\n          }\n\n          span {\n            line-height: 30px;\n          }\n\n          span:first-child {\n            color: rgb(101, 104, 115);\n            margin-right: 10px;\n            vertical-align: middle;\n          }\n        }\n      }\n    }\n\n    .chatInputs {\n      width: 90%;\n      position: absolute;\n      bottom: 0;\n      margin: 3%;\n      display: flex;\n\n      .boxinput {\n        width: 50px;\n        height: 50px;\n        background-color: rgb(50, 54, 68);\n        border-radius: 15px;\n        border: 1px solid rgb(80, 85, 103);\n        box-shadow: 0px 0px 5px 0px rgb(0, 136, 255);\n        position: relative;\n        cursor: pointer;\n\n        img {\n          width: 30px;\n          height: 30px;\n          position: absolute;\n          left: 50%;\n          top: 50%;\n          transform: translate(-50%, -50%);\n        }\n      }\n\n      .emoji {\n        transition: 0.3s;\n        width: 50px;\n        min-width: 50px;\n      }\n\n      .luyin {\n        color: #fff;\n        margin-left: 1.5%;\n        font-size: 30px;\n        text-align: center;\n        transition: 0.3s;\n        width: 50px;\n        min-width: 50px;\n      }\n\n      .inputs {\n        width: 95%;\n        height: 50px;\n        background-color: rgb(66, 70, 86);\n        border-radius: 15px;\n        border: 2px solid rgb(34, 135, 225);\n        padding: 10px;\n        box-sizing: border-box;\n        transition: 0.2s;\n        font-size: 20px;\n        color: #fff;\n        font-weight: 100;\n        margin: 0 20px;\n\n        &:focus {\n          outline: none;\n        }\n      }\n\n      .send {\n        background-color: rgb(29, 144, 245);\n        border: 0;\n        transition: 0.3s;\n        box-shadow: 0px 0px 5px 0px rgba(0, 136, 255);\n\n        &:hover {\n          box-shadow: 0px 0px 10px 0px rgba(0, 136, 255);\n        }\n      }\n    }\n  }\n}\n\n\n.line {\n  position: relative;\n  width: 94%;\n  margin-left: 2%;\n  height: 2px;\n  background: linear-gradient(to right, red, yellow, green);\n  animation: shrink-and-expand 2s ease-in-out infinite;\n\n}\n\n.line::before,\n.line::after {\n  content: \"\";\n  position: absolute;\n  top: 0;\n  width: 50%;\n  height: 100%;\n  background: inherit;\n}\n\n.line::before {\n  border-top-left-radius: 2px;\n  border-bottom-left-radius: 2px;\n  left: 0;\n  transform-origin: left;\n  animation: shrink-left 2s ease-in-out infinite;\n}\n\n.line::after {\n  border-top-left-radius: 2px;\n  border-bottom-left-radius: 2px;\n  right: 0;\n  transform-origin: right;\n  animation: shrink-right 2s ease-in-out infinite;\n}\n\n@keyframes shrink-and-expand {\n\n  0%,\n  100% {\n    transform: scaleX(1);\n  }\n\n  50% {\n    transform: scaleX(0);\n  }\n}\n\n@keyframes shrink-left {\n\n  0%,\n  50% {\n    transform: scaleX(1);\n  }\n\n  50.1%,\n  100% {\n    transform: scaleX(0);\n  }\n}\n\n@keyframes shrink-right {\n\n  0%,\n  50% {\n    transform: scaleX(1);\n  }\n\n  50.1%,\n  100% {\n    transform: scaleX(0);\n  }\n}</style>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}