{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.array.unshift.js\";\nimport base from './index';\nimport { AI_HEAD_IMG_URL } from '../store/mutation-types';\nimport { generateUUID } from \"@/util/util\";\nlet axios = base.axios;\nlet baseUrl = base.baseUrl;\n\n// 根据name查找元素的索引\nfunction findIndexByName(arr, name) {\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i].name === name || arr[i] === name) {\n      return i;\n    }\n  }\n  return -1; // 没有找到对应的元素\n}\n\nconst desp_model = {\n  \"gpt-3.5-turbo\": \"chatgpt v3.5 所基于的模型\",\n  \"ada\": \"自然语言模型，OpenAI提供的最快，最便宜的模型，但性能也最差，含有ada字眼的模型都是基于ada训练而来\",\n  \"babbage\": \"自然语言模型，性能比ada强，价格比ada贵，规模比ada大，含有babbage字眼的模型都是基于babbage训练而来\",\n  \"curie\": \"自然语言模型，性能优于ada，babbage，价钱也更贵，规模更大，含有curie字眼的模型都是基于curie训练而来\",\n  \"davinci\": \"自然语言模型，在ada，babbage，curie和davinci中性能最优，规模最大，速度最慢，价钱最贵，含有davinci字眼的模型都是基于davinci训练而来，目前chatgpt基于davinci微调而来\",\n  \"whisper-1\": \"强大的语音转换文本的模型\"\n};\nconst other_desps = {\n  \"code\": \"的AI代码处理模型\",\n  \"similarity\": \"的AI文本相似度计算模型\",\n  \"document\": \"的大文档处理模型\",\n  \"text\": \"的文本处理模型\",\n  \"instruct\": \"的人工指令微调模型\",\n  \"if\": \"一个分支\"\n};\nconst desp_keys = Object.keys(desp_model);\nconst other_desp_keys = Object.keys(other_desps);\nfunction produceModelDesc(model) {\n  const idx = findIndexByName(desp_keys, model);\n  if (idx !== -1) {\n    return desp_model[model];\n  } else {\n    let desc = '';\n    for (let i = 0; i < desp_keys.length; i++) {\n      const key = desp_keys[i];\n      if (model.includes(key)) {\n        desc += `基于语言模型${key}`;\n        break;\n      }\n    }\n    for (let i = 0; i < other_desp_keys.length; i++) {\n      const key = other_desp_keys[i];\n      if (model.includes(key)) {\n        desc += other_desps[key];\n        break;\n      }\n    }\n    if (desc == \"\") {\n      desc = model + \"模型\";\n    }\n    return desc;\n  }\n}\n\n// 获取模型列表\nexport const getModels = token => {\n  return axios({\n    method: 'get',\n    baseURL: `${baseUrl}/v1/models`,\n    headers: {\n      'Authorization': 'Bearer ' + token,\n      'Content-Type': 'application/json'\n    }\n  }).then(res => {\n    const modelsObj = [];\n    //获取所有的模型\n    const models = [...new Set(res.data.data.map(model => model.id))].sort();\n    models.forEach(model => {\n      let modelObj = {\n        img: \"\",\n        name: model,\n        detail: produceModelDesc(model),\n        lastMsg: produceModelDesc(model),\n        id: model,\n        headImg: AI_HEAD_IMG_URL,\n        showHeadImg: true\n      };\n      modelsObj.push(modelObj);\n    });\n    // 将gpt-3.5-turbo置顶\n    const idx = findIndexByName(modelsObj, \"gpt-3.5-turbo\");\n    if (idx !== -1) {\n      const element = modelsObj.splice(idx, 1)[0]; // 将idx元素删除\n      modelsObj.unshift(element); // 将idx出的元素至于列表头\n    }\n\n    return modelsObj;\n  });\n};\n\n// 根据提示创建图像\nexport const createImage = (params, token) => {\n  console.log(params);\n  return axios({\n    method: 'post',\n    baseURL: `${baseUrl}/v1/images/generations`,\n    headers: {\n      'Authorization': 'Bearer ' + token,\n      'Content-Type': 'application/json'\n    },\n    data: params\n  }).then(res => {\n    return res.data.data;\n  });\n};\n\n// 根据提示词编辑图像\nexport const createImageEdit = (formData, token) => {\n  return axios({\n    method: 'post',\n    baseURL: `${baseUrl}/v1/images/edits`,\n    headers: {\n      'Authorization': 'Bearer ' + token,\n      'Content-Type': 'multipart/form-data'\n    },\n    data: formData\n  }).then(res => {\n    return res.data.data;\n  });\n};\n\n// 根据创建图像变体\nexport const createImageVariations = (formData, token) => {\n  return axios({\n    method: 'post',\n    baseURL: `${baseUrl}/v1/images/variations`,\n    headers: {\n      'Authorization': 'Bearer ' + token,\n      'Content-Type': 'multipart/form-data'\n    },\n    data: formData\n  }).then(res => {\n    return res.data.data;\n  });\n};\n\n// 将音频转换为文字\nexport const createTranscription = (formData, token) => {\n  return axios({\n    method: 'post',\n    baseURL: `${baseUrl}/v1/audio/transcriptions`,\n    headers: {\n      'Authorization': 'Bearer ' + token,\n      'Content-Type': 'multipart/form-data'\n    },\n    data: formData\n  }).then(res => {\n    return res.data;\n  });\n};\n\n// 将音频翻译成英语\nexport const createTranslation = (formData, token) => {\n  return axios({\n    method: 'post',\n    baseURL: `${baseUrl}/v1/audio/translations`,\n    headers: {\n      'Authorization': 'Bearer ' + token,\n      'Content-Type': 'multipart/form-data'\n    },\n    data: formData\n  }).then(res => {\n    return res.data;\n  });\n};\n\n// 创建微调\nexport const createFineTune = (formData, token) => {\n  return axios({\n    method: 'post',\n    baseURL: `${baseUrl}/v1/fine-tunes`,\n    headers: {\n      'Authorization': 'Bearer ' + token,\n      'Content-Type': 'application/json'\n    },\n    data: formData\n  }).then(res => {\n    return res.data;\n  });\n};\n\n// 列出微调\nexport const getFineTunesList = token => {\n  return axios({\n    method: 'get',\n    baseURL: `${baseUrl}/v1/fine-tunes`,\n    headers: {\n      'Authorization': 'Bearer ' + token,\n      'Content-Type': 'application/json'\n    }\n  }).then(res => {\n    console.log(res);\n    const fineTunesObjs = [];\n    res.data.data.forEach(fineTunes => {\n      let fineTunesObj = {\n        img: \"\",\n        name: fineTunes.fine_tuned_model,\n        detail: \"基于\" + fineTunes.model + \"微调创建的模型\",\n        lastMsg: \"基于\" + fineTunes.model + \"微调创建的模型\",\n        id: fineTunes.fine_tuned_model ? fineTunes.fine_tuned_model : generateUUID(),\n        headImg: AI_HEAD_IMG_URL,\n        showHeadImg: true,\n        createTime: fineTunes.created_at,\n        fineTunesId: fineTunes.id,\n        fineTunesStatus: fineTunes.status\n      };\n      fineTunesObjs.push(fineTunesObj);\n    });\n    return fineTunesObjs.sort((a, b) => b.createTime - a.createTime);\n  });\n};\n\n// 检索微调信息\nexport const retrieveFineTune = (fineTuneId, token) => {\n  return axios({\n    method: 'get',\n    baseURL: `${baseUrl}/v1/fine-tunes/` + fineTuneId,\n    headers: {\n      'Authorization': 'Bearer ' + token,\n      'Content-Type': 'application/json'\n    }\n  }).then(res => {\n    return res.data;\n  });\n};\n\n// 取消微调\nexport const cancelFineTune = (fineTuneId, token) => {\n  return axios({\n    method: 'post',\n    baseURL: `${baseUrl}/v1/fine-tunes/` + fineTuneId + '/cancel',\n    headers: {\n      'Authorization': 'Bearer ' + token,\n      'Content-Type': 'application/json'\n    }\n  }).then(res => {\n    return res.data;\n  });\n};\n\n// 获取微调事件列表\nexport const getFineTuneEventsList = (fineTuneId, token) => {\n  return axios({\n    method: 'get',\n    baseURL: `${baseUrl}/v1/fine-tunes/` + fineTuneId + '/events',\n    headers: {\n      'Authorization': 'Bearer ' + token,\n      'Content-Type': 'multipart/form-data'\n    },\n    data: fineTuneId\n  }).then(res => {\n    return res.data;\n  });\n};\n\n// 删除微调模型\nexport const deleteFineTuneModel = (model, token) => {\n  return axios({\n    method: 'delete',\n    baseURL: `${baseUrl}/v1/models/` + model,\n    headers: {\n      'Authorization': 'Bearer ' + token,\n      'Content-Type': 'application/json'\n    }\n  }).then(res => {\n    return res.data;\n  });\n};\n\n//获取文件列表\nexport const getFilesList = token => {\n  return axios({\n    method: 'get',\n    baseURL: `${baseUrl}/v1/files`,\n    headers: {\n      'Authorization': 'Bearer ' + token,\n      'Content-Type': 'application/json'\n    }\n  }).then(res => {\n    console.log(res);\n    const fileObjs = [];\n    res.data.data.forEach(file => {\n      let fileObj = {\n        img: \"\",\n        name: file.filename,\n        detail: \"文件ID是:\" + file.id + \",文件大小是:\" + (file.bytes / 1024 / 1024).toFixed(2) + \"MB\",\n        lastMsg: \"文件ID是:\" + file.id + \",文件大小是:\" + (file.bytes / 1024 / 1024).toFixed(2) + \"MB\",\n        id: file.filename,\n        createTime: file.created_at,\n        fileId: file.id\n      };\n      fileObjs.push(fileObj);\n    });\n    return fileObjs.sort((a, b) => b.createTime - a.createTime);\n  });\n};\n\n// 删除文件\nexport const deleteFile = (file, token) => {\n  return axios({\n    method: 'delete',\n    baseURL: `${baseUrl}/v1/files/` + file,\n    headers: {\n      'Authorization': 'Bearer ' + token,\n      'Content-Type': 'application/json'\n    }\n  }).then(res => {\n    return res.data;\n  });\n};\n\n// 上传JSONL文件\nexport const uploadFile = (formData, token) => {\n  return axios({\n    method: 'post',\n    baseURL: `${baseUrl}/v1/files`,\n    headers: {\n      'Authorization': 'Bearer ' + token,\n      'Content-Type': 'multipart/form-data'\n    },\n    data: formData\n  }).then(res => {\n    console.log(\"文件上传成功\");\n    console.log(res);\n    return res.data;\n  });\n};\n\n// 检索文件\nexport const retrieveFile = (file, token) => {\n  return axios({\n    method: 'get',\n    baseURL: `${baseUrl}/v1/files/` + file,\n    headers: {\n      'Authorization': 'Bearer ' + token,\n      'Content-Type': 'application/json'\n    }\n  }).then(res => {\n    return res.data;\n  });\n};\n\n// 检索文件内容\nexport const retrieveFileContent = (file, token) => {\n\n  // return axios({\n  //   method: 'get',\n  //   baseURL: `${baseUrl}v1/files/`+file+`/content`,\n  //   headers: {\n  //     'Authorization': 'Bearer ' + token\n  //   }\n  // }).then(response => {\n  //   const writer = fs.createWriteStream('./file.txt')\n  //   response.data.pipe(writer)\n  // })\n};\n\n// 检索文件内容\nexport const createEmbeddings = (params, token) => {\n  return axios({\n    method: 'post',\n    baseURL: `${baseUrl}/v1/embeddings`,\n    headers: {\n      'Authorization': 'Bearer ' + token,\n      'Content-Type': 'application/json'\n    },\n    data: params\n  }).then(response => {\n    console.log(response);\n    return response.data;\n  });\n};\n\n// 获取账号余额信息\nexport const getMoneyInfo = token => {\n  return axios({\n    method: 'get',\n    baseURL: `${baseUrl}/dashboard/billing/credit_grants`,\n    headers: {\n      'Authorization': 'Bearer ' + token,\n      'Content-Type': 'application/json'\n    }\n  }).then(res => {\n    return res.data;\n  });\n};\n\n// 获取聊天信息\nexport const getChatMsg = params => {\n  return axios({\n    method: 'post',\n    baseURL: `${baseUrl}/friend/chatMsg`,\n    data: params\n  }).then(res => res.data);\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}