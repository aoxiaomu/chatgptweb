{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.array.unshift.js\";\nimport PersonCard from \"@/components/PersonCard.vue\";\nimport Session from \"@/components/Session.vue\";\nimport File from \"@/components/File.vue\";\nimport ChatWindow from \"./chatwindow.vue\";\nimport { AI_HEAD_IMG_URL } from '@/store/mutation-types';\nimport { getModels, getMoneyInfo, getFineTunesList, getFilesList, uploadFile, createFineTune, cancelFineTune, deleteFineTuneModel, retrieveFineTune, deleteFile, retrieveFile, retrieveFileContent } from \"@/api/getData\";\nimport { saveAs } from 'file-saver';\nimport { getNowTime, JCMFormatDate, JCMFormatTimestamp } from \"@/util/util\";\nconst {\n  Configuration,\n  OpenAIApi\n} = require(\"openai\");\nexport default {\n  name: \"App\",\n  components: {\n    PersonCard,\n    ChatWindow,\n    Session,\n    File\n  },\n  data() {\n    return {\n      fileSearch: \"\",\n      sessionSearch: \"\",\n      showFineSetting: false,\n      cancelFineStatus: true,\n      storeStatus: 0,\n      //宽度\n      defaulWidth: 70,\n      //0是聊天设置，1是图片设置\n      SettingStatus: 0,\n      //0是模型列表，1是会话列表\n      cutSetting: 1,\n      //余额信息\n      moneryInfo: {\n        totalGranted: 0,\n        totalUsed: 0,\n        totalAvailable: 0\n      },\n      batch_sizeStr: \"\",\n      //全部的设置参数\n      SettingInfo: {\n        readefile: false,\n        inputStatus: true,\n        translateEnglish: false,\n        openProductionPicture: false,\n        openChangePicture: false,\n        KeyMsg: process.env.VUE_APP_OPENAI_API_KEY,\n        MaxTokens: 1000,\n        Temperature: 1,\n        TemperatureAudio: 0,\n        TopP: 1,\n        FrequencyPenalty: 0,\n        PresencePenalty: 0,\n        n: 1,\n        size: \"256x256\",\n        language: \"zh\",\n        contentImageUrl: \"\",\n        fineTunes: {\n          training_file: \"\",\n          validation_file: \"\",\n          batch_size: \"\",\n          model: \"curie\",\n          n_epochs: 4,\n          prompt_loss_weight: 0.01,\n          compute_classification_metrics: false,\n          suffix: \"\"\n        }\n      },\n      //当前点击的文件\n      fiCurrent: \"\",\n      //当前点击的模型\n      pcCurrent: \"\",\n      //当前点击的会话\n      sessionCurrent: \"\",\n      //当前点击的微调模型\n      ftCurrent: \"\",\n      //微调搜索数据\n      fineTuningSearch: \"\",\n      //模型搜索数据\n      modelSearch: \"\",\n      //文件列表\n      fileList: [],\n      //文件缓存列表\n      fineTuningSearch: [],\n      //微调模型列表\n      fineTuningList: [],\n      //微调模型缓存列表\n      fineTuningCacheList: [],\n      //模型列表\n      personList: [],\n      //会话列表\n      sessionList: [],\n      //模型列表缓存\n      personListCache: [],\n      //是否显示聊天窗口\n      showChatWindow: true,\n      //当前窗口的对话模型信息\n      chatWindowInfo: {},\n      //图片大小参数列表\n      imgSizes: [{\n        value: '256x256'\n      }, {\n        value: '512x512'\n      }, {\n        value: '1024x1024'\n      }],\n      //语音定义的参数\n      languages: [{\n        value: 'zh'\n      }, {\n        value: 'en'\n      }, {\n        value: 'fr'\n      }, {\n        value: 'de'\n      }, {\n        value: 'ja'\n      }],\n      // 是否隐藏模型列表和功能设置选择列表\n      showPersonList: true,\n      showSetupList: true\n    };\n  },\n  created() {\n    window.addEventListener('resize', this.handleResize);\n    this.handleResize();\n  },\n  destoryed() {\n    window.removeEventListener('resize', this.handleResize);\n  },\n  mounted() {\n    this.chatWindowInfo = {\n      img: \"\",\n      name: \"ChatGPT-3.5\",\n      detail: \"chatgpt v3.5 所基于的模型\",\n      lastMsg: \"chatgpt v3.5 所基于的模型\",\n      id: \"gpt-3.5-turbo\",\n      headImg: AI_HEAD_IMG_URL,\n      showHeadImg: true\n    };\n    if (this.SettingInfo.KeyMsg) {\n      this.getModelList(this.SettingInfo.KeyMsg);\n    }\n    // 在Vue实例中添加监听函数\n    this.$watch('SettingInfo.KeyMsg', this.watchKeyMsg);\n    this.$watch('SettingInfo.contentImageUrl', this.watchContentImageUrl);\n    this.$watch('modelSearch', this.watchModelSearch);\n    this.$watch('fineTuningSearch', this.watchFineTuningSearch);\n    this.$watch('fileSearch', this.watchFileSearch);\n  },\n  filters: {\n    //截取数据到小数点后几位\n    numFilterReserved(value, digit) {\n      return parseFloat(value).toFixed(digit);\n    }\n  },\n  watch: {\n    SettingInfo: {\n      handler: function (newVal, oldVal) {\n        if (newVal.openChangePicture) {\n          this.SettingInfo.openProductionPicture = false;\n        }\n        if (newVal.openProductionPicture) {\n          this.SettingInfo.openChangePicture = false;\n        }\n        if (newVal.fineTunes.batch_size) {\n          this.SettingInfo.fineTunes.batch_size = parseInt(newVal.fineTunes.batch_size);\n        }\n        if (newVal.fineTunes.learning_rate_multiplier) {\n          this.SettingInfo.fineTunes.learning_rate_multiplier = parseInt(newVal.fineTunes.learning_rate_multiplier);\n        }\n        if (newVal.fineTunes.classification_n_classes) {\n          this.SettingInfo.fineTunes.classification_n_classes = parseInt(newVal.fineTunes.classification_n_classes);\n        }\n        if (newVal.fineTunes.classification_positive_class) {\n          this.SettingInfo.fineTunes.classification_positive_class = parseInt(newVal.fineTunes.classification_positive_class);\n        }\n        if (newVal.fineTunes.classification_betas) {\n          this.SettingInfo.fineTunes.classification_betas = newVal.fineTunes.classification_betas.split(\",\").map(str => parseInt(str));\n        }\n      },\n      deep: true\n    }\n  },\n  methods: {\n    // 监听contentImageUrl属性的变化\n    watchContentImageUrl: function (newVal, oldVal) {\n      if (newVal) {\n        this.$refs.chatWindow.updateContentImageUrl(newVal);\n      } else {\n        this.$refs.chatWindow.updateContentImageUrl(\"https://bpic.51yuansu.com/backgd/cover/00/31/39/5bc8088deeedd.jpg?x-oss-process=image/resize,w_780\");\n      }\n    },\n    //监听fineTuningSearch属性的变化\n    watchFineTuningSearch: function (newVal, oldVal) {\n      if (this.fineTuningList.length !== 0) {\n        if (!this.cancelFineStatus) {\n          this.fineTuningList = this.fineTuningCacheList.filter(fineTunin => fineTunin.fineTunesStatus === \"succeeded\").filter(fineTuning => fineTuning.id.includes(newVal));\n        } else {\n          this.fineTuningList = this.fineTuningCacheList.filter(fineTuning => fineTuning.id.includes(newVal));\n        }\n      }\n      if (newVal == \"\") {\n        if (!this.cancelFineStatus) {\n          this.fineTuningList = this.fineTuningCacheList.filter(fineTunin => fineTunin.fineTunesStatus === \"succeeded\");\n        } else {\n          this.fineTuningList = this.fineTuningCacheList;\n        }\n      }\n    },\n    //监听fileSearch属性的变化\n    watchFileSearch: function (newVal, oldVal) {\n      if (this.fileList.length !== 0) {\n        this.fileList = this.fileCacheList.filter(fileList => fileList.id.includes(newVal));\n      }\n      if (newVal == \"\") {\n        this.fileList = this.fileCacheList;\n      }\n    },\n    // 监听modelSearch属性的变化\n    watchModelSearch: function (newVal, oldVal) {\n      if (this.personList.length !== 0) {\n        this.personList = this.personListCache.filter(person => person.id.includes(newVal));\n      }\n      if (newVal == \"\") {\n        this.personList = this.personListCache;\n      }\n    },\n    // 监听KeyMsg属性的变化\n    watchKeyMsg: function (newVal, oldVal) {\n      //获取模型列表\n      getModels(newVal).then(res => {\n        //保存OpenAI key到session中\n        this.personList = res;\n        this.personListCache = res;\n        //获取余额信息\n        getMoneyInfo(newVal).then(res => {\n          this.moneryInfo.totalGranted = res.total_granted;\n          this.moneryInfo.totalUsed = res.total_used;\n          this.moneryInfo.totalAvailable = res.total_available;\n        });\n      }).catch(e => {\n        this.$message({\n          message: \"获取模型列表失败哦~\",\n          type: \"error\"\n        });\n      });\n    },\n    //显示或者隐藏取消过的微调模型\n    showOrHidenCancelFine(status) {\n      this.cancelFineStatus = status;\n      if (this.cancelFineStatus == true) {\n        this.fineTuningList = this.fineTuningCacheList;\n      } else {\n        this.fineTuningList = this.fineTuningCacheList.filter(fineTunin => fineTunin.fineTunesStatus === \"succeeded\");\n      }\n    },\n    //导入会话列表触发的方法\n    importFromJsonArrAll() {\n      this.$refs.onupdateJosnArrAll.click(); // 触发选择文件的弹框\n    },\n\n    handleFileUploadAll(event) {\n      const file = event.target.files[0];\n      const reader = new FileReader();\n      reader.onload = () => {\n        const fileContent = reader.result; // 文件内容\n        const parsed = JSON.parse(fileContent); // 转换为数组\n        this.sessionList = parsed;\n      };\n      reader.readAsText(file);\n    },\n    //导入当前内容json触发的方法\n    importFromJsonArr() {\n      this.$refs.onupdateJosnArr.click(); // 触发选择文件的弹框\n    },\n\n    handleFileUpload(event) {\n      const file = event.target.files[0];\n      const reader = new FileReader();\n      reader.onload = () => {\n        const fileContent = reader.result; // 文件内容\n        const parsed = JSON.parse(fileContent); // 转换为数组\n        this.$refs.chatWindow.assignmentMesList(parsed);\n      };\n      reader.readAsText(file);\n    },\n    //导出所有会话到json文件\n    exportObjArrAllToJson() {\n      let jsonString = JSON.stringify(this.sessionList); // 将数组转为JSON字符串\n      let blob = new Blob([jsonString], {\n        type: \"application/json;charset=utf-8\"\n      });\n      saveAs(blob, \"data.json\");\n    },\n    //导出当前会话到json文件\n    exportObjArrToJson() {\n      const mesList = this.$refs.chatWindow.getMesList();\n      let jsonString = JSON.stringify(mesList); // 将数组转为JSON字符串\n      let blob = new Blob([jsonString], {\n        type: \"application/json;charset=utf-8\"\n      });\n      saveAs(blob, \"data.json\");\n    },\n    //清除所有的会话内容\n    clearAllContext() {\n      this.sessionList = [];\n    },\n    //清除当前会话内容\n    clearCurrentContext() {\n      this.$refs.chatWindow.clearMsgList();\n    },\n    // 点击切换显示状态\n    toggleLeft() {\n      console.log(\"left clicked\");\n      this.showPersonList = !this.showPersonList;\n    },\n    toggleRight() {\n      console.log(\"right clicked\");\n      this.showSetupList = !this.showSetupList;\n    },\n    //获取模型列表\n    getModelList(key) {\n      getModels(key).then(modelsRes => {\n        // 提取fineTunesRes集合中所有id属性值\n        getFineTunesList(key).then(fineTunesRes => {\n          const fineTunesIds = fineTunesRes.map(item => item.id);\n          const models = modelsRes.filter(item => !fineTunesIds.includes(item.id));\n          this.personList = models;\n          this.personListCache = models;\n        });\n        this.updateMoneyInfo();\n      }).catch(e => {\n        this.$message({\n          message: \"获取模型列表失败哦~\",\n          type: \"error\"\n        });\n      });\n    },\n    //获取微调模型列表\n    getFineTunessList(key) {\n      getFineTunesList(key).then(res => {\n        this.fineTuningList = res;\n        this.fineTuningCacheList = res;\n      }).catch(e => {\n        this.$message({\n          message: \"获取微调列表失败哦~\",\n          type: \"error\"\n        });\n      });\n    },\n    //获取文件列表\n    getFilessList(key) {\n      getFilesList(key).then(res => {\n        this.fileList = res;\n        this.fileCacheList = res;\n      }).catch(e => {\n        this.$message({\n          message: \"获取文件列表失败哦~\",\n          type: \"error\"\n        });\n      });\n    },\n    //监听窗口尺寸的变化\n    handleResize() {\n      if (window.innerWidth <= 1150) {\n        this.showPersonList = false;\n        this.showSetupList = false;\n        this.showChatWindow = true;\n        const info = {\n          img: \"\",\n          name: \"ChatGPT-3.5\",\n          detail: \"chatgpt v3.5 所基于的模型\",\n          lastMsg: \"chatgpt v3.5 所基于的模型\",\n          id: \"gpt-3.5-turbo\",\n          headImg: AI_HEAD_IMG_URL,\n          showHeadImg: true\n        };\n        this.chatWindowInfo = info;\n        this.personInfo = info;\n      } else {\n        this.showPersonList = true;\n        this.showSetupList = true;\n      }\n      ;\n    },\n    // 更新当前余额\n    updateMoneyInfo() {\n      getMoneyInfo(this.SettingInfo.KeyMsg).then(res => {\n        this.$nextTick(() => {\n          this.moneryInfo.totalGranted = res.total_granted;\n          this.moneryInfo.totalUsed = res.total_used;\n          this.moneryInfo.totalAvailable = res.total_available;\n        });\n      });\n    },\n    //创建会话\n    newSession() {\n      //获取当前会话长度\n      const currentLen = this.sessionList.length + 1;\n      //定义对象\n      const obj = {\n        \"id\": currentLen,\n        \"title\": \"\",\n        \"dataList\": []\n      };\n      //先获取对话的列表\n      const msgList = this.$refs.chatWindow.getMesList();\n      if (msgList.length >= 2) {\n        if (this.sessionCurrent) {\n          this.sessionCurrent = \"\";\n          //清除当前窗口数据\n          this.$refs.chatWindow.clearMsgList();\n        } else {\n          obj.title = msgList[0].msg;\n          obj.dataList = msgList;\n          let tempSessionList = this.sessionList;\n          tempSessionList.push(obj);\n          this.sessionList = tempSessionList.reverse();\n          this.sessionCurrent = \"\";\n          //清除当前窗口数据\n          this.$refs.chatWindow.clearMsgList();\n        }\n      } else if (msgList.length = 1) {\n        //清除当前窗口数据\n        this.$refs.chatWindow.clearMsgList();\n      }\n    },\n    //模型列表被点击\n    modelClick() {\n      this.clearCurrent();\n      this.getModelList(this.SettingInfo.KeyMsg);\n      //清除被点击的微调对象\n      this.fineTuningInfo = {};\n      this.SettingStatus = 0;\n      this.cutSetting = 0;\n      // this.showChatWindow = false;\n    },\n\n    //会话列表被点击\n    sessionClick() {\n      //清除当前点击的状态\n      this.clearCurrent();\n      this.SettingStatus = 5;\n      this.cutSetting = 1;\n      this.chatWindowInfo = {\n        img: \"\",\n        name: \"ChatGPT-3.5\",\n        detail: \"chatgpt v3.5 所基于的模型\",\n        lastMsg: \"chatgpt v3.5 所基于的模型\",\n        id: \"gpt-3.5-turbo\",\n        headImg: AI_HEAD_IMG_URL,\n        showHeadImg: true\n      };\n      // this.showChatWindow = true;\n    },\n\n    //微调模型列表被点击\n    fineTuningClick() {\n      this.clearCurrent();\n      this.SettingStatus = 3;\n      this.cutSetting = 2;\n      // this.showChatWindow = false;\n      //获取微调模型列表\n      this.getFineTunessList(this.SettingInfo.KeyMsg);\n    },\n    clearCurrent() {\n      //清除当前选择的模型微调模型\n      this.ftCurrent = \"\";\n      //清除当前选择的模型\n      this.pcCurrent = \"\";\n      //清除当前选择的会话\n      this.sessionCurrent = \"\";\n      //清除当前选择的文件\n      this.fiCurrent = \"\";\n    },\n    //文件列表被点击\n    fileClick() {\n      this.clearCurrent();\n      //清除被点击的微调对象\n      this.fineTuningInfo = {};\n      this.SettingStatus = 4;\n      this.cutSetting = 3;\n      //获取微调模型列表\n      this.getFilessList(this.SettingInfo.KeyMsg);\n    },\n    //上传文件按钮被点击触发的方法\n    uploadFile() {\n      this.$refs.fileInput.click();\n    },\n    //文件上传触发的方法\n    onFileChange(e) {\n      //获取文件\n      const file = e.target.files[0];\n      // 验证文件类型是否为jsonl格式\n      if (!file.name.endsWith('.jsonl')) {\n        this.$message({\n          message: \"请上传一个有效的JSONL文件~\",\n          type: \"warning\"\n        });\n        return;\n      }\n      // 通过验证后，上传文件\n      const formData = new FormData();\n      formData.append(\"file\", file);\n      formData.append(\"purpose\", \"fine-tune\");\n      uploadFile(formData, this.SettingInfo.KeyMsg).then(res => {\n        this.$copy(res.id, \"文件已上传成功,文件ID是\" + res.id + \",已经帮您复制啦~\");\n        //更新文件列表\n        this.getFilessList(this.SettingInfo.KeyMsg);\n      });\n    },\n    //检索文件信息\n    retrieveOnFile() {\n      if (!this.fileInfo || !this.fileInfo.fileId) {\n        this.$message.error(\"只能检索文件哦~\");\n      } else {\n        retrieveFile(this.fileInfo.fileId, this.SettingInfo.KeyMsg).then(res => {\n          let context = \"`文件ID:`\" + res.id + \"  \\n\" + \"`文件名称:`\" + res.filename + \"  \\n\" + \"`文件大小:`\" + (res.bytes / 1024 / 1024).toFixed(2) + \"MB \\n\" + \"`对象:`\" + res.object + \"  \\n\" + \"`状态:`\" + res.status + \"  \\n\" + \"`状态描述`\" + res.status_details + \"  \\n\" + \"`目的` \" + res.purpose + \" \\n\" + \"`文件创建时间`\" + JCMFormatTimestamp(res.created_at);\n          let retrieveFineTuneMsg = {\n            headImg: AI_HEAD_IMG_URL,\n            name: res.filename,\n            time: JCMFormatDate(getNowTime()),\n            msg: context,\n            chatType: 0,\n            uid: res.id\n          };\n          this.$refs.chatWindow.sendMsg(retrieveFineTuneMsg);\n          console.log(res);\n        }).catch(e => {\n          this.$message.error(\"文件检索失败了~\");\n        });\n      }\n    },\n    //检索文件内容\n    async retrieveOnFileContent() {\n      if (!this.fileInfo || !this.fileInfo.fileId) {\n        this.$message.error(\"只能检索文件内容哦~\");\n      } else {\n        try {\n          const configuration = new Configuration({\n            apiKey: this.SettingInfo.KeyMsg\n          });\n          const openai = new OpenAIApi(configuration);\n          const response = await openai.downloadFile(this.fileInfo.fileId);\n        } catch (e) {\n          this.$message.error(\"OpenAI为了减少滥用，免费帐户将无法下载微调训练的文件~\");\n        }\n      }\n    },\n    //模型被点击\n    clickPerson(info) {\n      this.storeStatus = 0;\n      //传入当前聊天窗口信息\n      this.chatWindowInfo = info;\n      //设置当前被点击的对象\n      this.personInfo = info;\n      //设置当前被点击的模型id\n      this.pcCurrent = info.id;\n    },\n    //会话被点击\n    clickSession(info) {\n      this.sessionCurrent = info.id;\n      this.$refs.chatWindow.assignmentMesList(info.dataList);\n    },\n    //微调模型被点击\n    clickFineTuning(info) {\n      this.storeStatus = 1;\n      //传入当前聊天窗口信息\n      this.chatWindowInfo = info;\n      //设置当前被点击的对象\n      this.fineTuningInfo = info;\n      //设置当前选着的微调模型id\n      this.ftCurrent = info.id;\n    },\n    //文件被点击\n    clickFile(info) {\n      this.chatWindowInfo = {\n        img: \"\",\n        name: info.id,\n        detail: info.detail,\n        lastMsg: info.lastMsg,\n        id: info.id\n      };\n      this.fiCurrent = info.fileId;\n      this.fileInfo = info;\n    },\n    //删除文件\n    deleteOnFile() {\n      if (!this.fileInfo || !this.fileInfo.fileId) {\n        this.$message.error(\"只能删除文件哦~\");\n      } else {\n        deleteFile(this.fileInfo.fileId, this.SettingInfo.KeyMsg).then(res => {\n          this.$message.success(\"恭喜您删除成功~\");\n          this.getFilessList(this.SettingInfo.KeyMsg);\n        }).catch(e => {\n          this.$message.error(\"文件删除失败了~\");\n        });\n      }\n    },\n    //创建微调\n    createFine() {\n      createFineTune(this.SettingInfo.fineTunes, this.SettingInfo.KeyMsg).then(res => {\n        this.$message.success(\"恭喜您微调创建成功~\");\n        this.getFineTunessList(this.SettingInfo.KeyMsg);\n      }).catch(e => {\n        this.$message.error(\"微调创建失败了...\");\n      });\n    },\n    //删除微调\n    deleteFine() {\n      if (!this.fineTuningInfo || !this.fineTuningInfo.fineTunesId) {\n        this.$message.error(\"只能删除微调中的模型哦~\");\n      } else {\n        deleteFineTuneModel(this.fineTuningInfo.name, this.SettingInfo.KeyMsg).then(res => {\n          this.$message.success(\"恭喜您微调模型删除成功~\");\n          console.log(res);\n          this.getFineTunessList(this.SettingInfo.KeyMsg);\n        }).catch(e => {\n          this.$message.error(\"微调模型删除失败了,模型正在训练中或者中途已取消\");\n        });\n      }\n    },\n    //取消微调\n    cancelFine() {\n      if (!this.fineTuningInfo || !this.fineTuningInfo.fineTunesId || this.fineTuningInfo.fineTunesStatus === \"succeeded\") {\n        this.$message.error(\"只能取消进行训练中的微调模型哦~\");\n      } else {\n        console.log(this.fineTuningInfo.fineTunesId);\n        cancelFineTune(this.fineTuningInfo.fineTunesId, this.SettingInfo.KeyMsg).then(res => {\n          this.$message.success(\"成功取消此模型~\");\n          this.getFineTunessList(this.SettingInfo.KeyMsg);\n        }).catch(e => {\n          console.log(e);\n          this.$message.error(\"取消微调模型失败~\");\n        });\n      }\n    },\n    //检索微调\n    retrieveFine() {\n      if (!this.fineTuningInfo || !this.fineTuningInfo.fineTunesId) {\n        this.$message.error(\"只能检索的微调模型哦~\");\n      } else {\n        console.log(this.fineTuningInfo.fineTunesId);\n        retrieveFineTune(this.fineTuningInfo.fineTunesId, this.SettingInfo.KeyMsg).then(res => {\n          let context = \"`微调任务ID:`\" + res.id + \"  \\n\" + \"`任务类型:`\" + res.object + \"  \\n\" + \"`模型的类型:`\" + res.model + \"  \\n\" + \"`微调任务的创建时间:`\" + JCMFormatTimestamp(res.created_at) + \"  \\n\" + \"`微调的事件列表`  \\n\" + \"| 对象 | 日志级别 | 信息 | 创建时间  |\\n\" + \"| :------: | :------: | :------: | :------: |\\n\";\n          res.events.forEach(obj => {\n            context += `| ${obj.object} | ${obj.level} | ${obj.message} | ${JCMFormatTimestamp(obj.created_at)} |\\n`;\n          });\n          context += \"\\n `微调的模型ID:`\" + res.fine_tuned_model + \"\\n\\n `微调使用的参数:` \\n\" + \"| 属性 | 设置的值 | \\n\" + \"| :------: | :------: | \\n\";\n          for (let prop in res.hyperparams) {\n            if (res.hyperparams.hasOwnProperty(prop)) {\n              context += `| ${prop} | ${res.hyperparams[prop]} |\\n`;\n            }\n          }\n          context += \"\\n`用户所属组:`\" + res.organization_id;\n          if (res.result_files.length == 0) {\n            context += \"\\n\\n`训练结果文件列表:没有`\\n\\n\";\n          } else {\n            context += \"\\n\\n`训练结果文件列表:`\\n\\n\" + \"| ID  | 文件名称 | 文件大小 |   对象 | 状态 |    \\n\" + \"| :------: | :------: | :------: | :------: | :------: | \\n\";\n            res.result_files.forEach(obj => {\n              context += `| ${obj.id} | ${obj.filename}  | ${(obj.bytes / 1024 / 1024).toFixed(2) + \"MB\"} | ${obj.object} | ${obj.status} |  \\n`;\n            });\n          }\n          context += \"\\n`状态:`\" + res.status + \"\\n\";\n          if (res.training_files.length == 0) {\n            context += \"\\n\\n`训练的文件列表:没有`\\n\\n\";\n          } else {\n            context += \"\\n\\n`训练的文件列表:`\\n\\n\" + \"| ID  | 文件名称 | 文件大小 |   对象 | 状态 |  \\n\" + \"| :------: | :------: | :------: | :------: | :------: | \\n\";\n            res.training_files.forEach(obj => {\n              context += `| ${obj.id} | ${obj.filename}  | ${(obj.bytes / 1024 / 1024).toFixed(2) + \"MB\"} | ${obj.object} | ${obj.status} |  \\n`;\n            });\n          }\n          if (res.validation_files.length == 0) {\n            context += \"\\n\\n`验证的文件列表:没有`\\n\\n\";\n          } else {\n            context += \"\\n\\n`验证的文件列表:`\\n\\n\" + \"| ID  | 文件名称 | 文件大小 |   对象 | 状态 |  \\n\" + \"| :------: | :------: | :------: | :------: | :------: | \\n\";\n            res.validation_files.forEach(obj => {\n              context += `| ${obj.id} | ${obj.filename}  | ${(obj.bytes / 1024 / 1024).toFixed(2) + \"MB\"} | ${obj.object} | ${obj.status} |  \\n`;\n            });\n          }\n          context += \"\\n`最后更新时间戳:`\" + JCMFormatTimestamp(res.updated_at);\n          let retrieveFineTuneMsg = {\n            headImg: AI_HEAD_IMG_URL,\n            name: res.fine_tuned_model !== null ? res.fine_tuned_model : res.id,\n            time: JCMFormatDate(getNowTime()),\n            msg: context,\n            chatType: 0,\n            uid: res.id\n          };\n          this.$refs.chatWindow.sendMsg(retrieveFineTuneMsg);\n          console.log(res);\n        }).catch(e => {\n          console.log(e);\n          this.$message.error(\"检索微调模型失败~\");\n        });\n      }\n    },\n    personCardSort(id) {\n      if (id !== this.personList[0].id) {\n        console.log(id);\n        let nowPersonInfo;\n        for (let i = 0; i < this.personList.length; i++) {\n          if (this.personList[i].id == id) {\n            nowPersonInfo = this.personList[i];\n            this.personList.splice(i, 1);\n            break;\n          }\n        }\n        this.personList.unshift(nowPersonInfo);\n      }\n    },\n    fineTunesCardSort(id) {\n      if (id !== this.fineTuningList[0].id) {\n        console.log(id);\n        let nowPersonInfo;\n        for (let i = 0; i < this.fineTuningList.length; i++) {\n          if (this.fineTuningList[i].id == id) {\n            nowPersonInfo = this.fineTuningList[i];\n            this.fineTuningList.splice(i, 1);\n            break;\n          }\n        }\n        this.fineTuningList.unshift(nowPersonInfo);\n      }\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}